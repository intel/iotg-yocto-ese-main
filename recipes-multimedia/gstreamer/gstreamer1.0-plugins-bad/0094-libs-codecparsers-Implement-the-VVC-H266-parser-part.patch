From b96173febf8d117897d704f5dd5a9ecde14153a2 Mon Sep 17 00:00:00 2001
From: He Junyan <junyan.he@intel.com>
Date: Thu, 21 Nov 2024 01:17:27 +0800
Subject: [PATCH 094/117] libs: codecparsers: Implement the VVC(H266) parser
 part II

Implement the picture header, slice header and SEI parsing functions.

Co-authored-by: spartazhc <spartazhc@gmail.com>
Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/5003>
---
 gst-libs/gst/codecparsers/gsth266parser.c | 3148 ++++++++++++++++++++-
 1 file changed, 3092 insertions(+), 56 deletions(-)

diff --git a/gst-libs/gst/codecparsers/gsth266parser.c b/gst-libs/gst/codecparsers/gsth266parser.c
index 30cbb1a1f..929bc01a0 100644
--- a/gst-libs/gst/codecparsers/gsth266parser.c
+++ b/gst-libs/gst/codecparsers/gsth266parser.c
@@ -669,6 +669,78 @@ error:
   return FALSE;
 }
 
+static gboolean
+gst_h266_ref_pic_lists (GstH266RefPicLists * rpls, NalReader * nr,
+    const GstH266SPS * sps, const GstH266PPS * pps)
+{
+  const GstH266RefPicListStruct *ref_list;
+  gint i, j, num_ltrp_entries;
+
+  GST_LOG ("parsing \"ref_pic_lists\"");
+
+  for (i = 0; i < 2; i++) {
+    if (sps->num_ref_pic_lists[i] == 0) {
+      rpls->rpl_sps_flag[i] = 0;
+    } else if (i == 0 || (i == 1 && pps->rpl1_idx_present_flag)) {
+      READ_UINT8 (nr, rpls->rpl_sps_flag[i], 1);
+    } else {
+      /* Only the case of (i == 1 && !pps->rpl1_idx_present_flag)
+         comes to here. */
+      rpls->rpl_sps_flag[1] = rpls->rpl_sps_flag[0];
+    }
+
+    if (rpls->rpl_sps_flag[i]) {
+      g_assert (sps->num_ref_pic_lists[i] > 0);
+
+      if (sps->num_ref_pic_lists[i] == 1) {
+        rpls->rpl_idx[i] = 0;
+      } else if (i == 0 || (i == 1 && pps->rpl1_idx_present_flag)) {
+        READ_UINT8 (nr, rpls->rpl_idx[i],
+            gst_util_ceil_log2 (sps->num_ref_pic_lists[i]));
+        CHECK_ALLOWED_MAX (rpls->rpl_idx[i], sps->num_ref_pic_lists[i] - 1);
+      } else {
+        /* Only the case of (i == 1 && !pps->rpl1_idx_present_flag)
+           comes to here. */
+        rpls->rpl_idx[1] = rpls->rpl_idx[0];
+      }
+
+      memcpy (&rpls->rpl_ref_list[i],
+          &sps->ref_pic_list_struct[i][rpls->rpl_idx[i]],
+          sizeof (rpls->rpl_ref_list[i]));
+    } else {
+      gst_h266_ref_pic_list_struct (&rpls->rpl_ref_list[i], nr,
+          i, sps->num_ref_pic_lists[i], sps);
+    }
+    ref_list = &rpls->rpl_ref_list[i];
+
+    num_ltrp_entries = 0;
+    for (j = 0; j < ref_list->num_ref_entries; j++) {
+      if (ref_list->inter_layer_ref_pic_flag[j]
+          || ref_list->st_ref_pic_flag[j])
+        continue;
+
+      if (ref_list->ltrp_in_header_flag)
+        READ_UINT16 (nr, rpls->poc_lsb_lt[i][j],
+            sps->log2_max_pic_order_cnt_lsb_minus4 + 4);
+
+      READ_UINT8 (nr, rpls->delta_poc_msb_cycle_present_flag[i][j], 1);
+      if (rpls->delta_poc_msb_cycle_present_flag[i][j])
+        READ_UE_MAX (nr, rpls->delta_poc_msb_cycle_lt[i][j],
+            1 << (32 - sps->log2_max_pic_order_cnt_lsb_minus4 - 4));
+
+      num_ltrp_entries++;
+    }
+
+    g_assert (num_ltrp_entries == ref_list->num_long_term_pic);
+  }
+
+  return TRUE;
+
+error:
+  GST_WARNING ("error parsing \"ref_pic_lists \"");
+  return FALSE;
+}
+
 static gboolean
 gst_h266_parse_general_timing_hrd_parameters (GstH266GeneralHRDParameters * hrd,
     NalReader * nr)
@@ -1211,6 +1283,400 @@ error:
   return FALSE;
 }
 
+static GstH266ParserResult
+gst_h266_parser_parse_buffering_period (GstH266BufferingPeriod * bp,
+    NalReader * nr)
+{
+  guint i, j;
+
+  GST_LOG ("parsing \"Buffering period\"");
+
+  READ_UINT8 (nr, bp->nal_hrd_params_present_flag, 1);
+  READ_UINT8 (nr, bp->vcl_hrd_params_present_flag, 1);
+  READ_UINT8 (nr, bp->cpb_initial_removal_delay_length_minus1, 5);
+  READ_UINT8 (nr, bp->cpb_removal_delay_length_minus1, 5);
+  READ_UINT8 (nr, bp->dpb_output_delay_length_minus1, 5);
+
+  READ_UINT8 (nr, bp->du_hrd_params_present_flag, 1);
+  if (bp->du_hrd_params_present_flag) {
+    READ_UINT8 (nr, bp->du_cpb_removal_delay_increment_length_minus1, 5);
+    READ_UINT8 (nr, bp->dpb_output_delay_du_length_minus1, 5);
+    READ_UINT8 (nr, bp->du_cpb_params_in_pic_timing_sei_flag, 1);
+    READ_UINT8 (nr, bp->du_dpb_params_in_pic_timing_sei_flag, 1);
+  }
+
+  READ_UINT8 (nr, bp->concatenation_flag, 1);
+
+  READ_UINT8 (nr, bp->additional_concatenation_info_present_flag, 1);
+  if (bp->additional_concatenation_info_present_flag)
+    READ_UINT8 (nr, bp->max_initial_removal_delay_for_concatenation,
+        bp->cpb_removal_delay_length_minus1 + 1);
+
+  READ_UINT8 (nr, bp->cpb_removal_delay_delta_minus1,
+      bp->cpb_removal_delay_length_minus1 + 1);
+
+  READ_UINT8 (nr, bp->max_sublayers_minus1, 3);
+  if (bp->max_sublayers_minus1 > 0)
+    READ_UINT8 (nr, bp->cpb_removal_delay_deltas_present_flag, 1);
+
+  if (bp->cpb_removal_delay_deltas_present_flag) {
+    READ_UE_MAX (nr, bp->num_cpb_removal_delay_deltas_minus1, 15);
+    for (i = 0; i <= bp->num_cpb_removal_delay_deltas_minus1; i++)
+      READ_UINT8 (nr, bp->cpb_removal_delay_delta_val[i], 1);
+  }
+
+  READ_UE_MAX (nr, bp->cpb_cnt_minus1, 31);
+
+  if (bp->max_sublayers_minus1 > 0)
+    READ_UINT8 (nr, bp->sublayer_initial_cpb_removal_delay_present_flag, 1);
+
+  for (i = (bp->sublayer_initial_cpb_removal_delay_present_flag ?
+          0 : bp->max_sublayers_minus1); i <= bp->max_sublayers_minus1; i++) {
+    if (bp->nal_hrd_params_present_flag) {
+      for (j = 0; j < bp->cpb_cnt_minus1 + 1; j++) {
+        /* shall be 0 < x <= 90000 * (CpbSize[i][j] / BitRate[i][j]) */
+        READ_UINT8 (nr, bp->nal_initial_cpb_removal_delay[i][j],
+            bp->cpb_initial_removal_delay_length_minus1 + 1);
+        READ_UINT8 (nr, bp->nal_initial_cpb_removal_offset[i][j],
+            bp->cpb_initial_removal_delay_length_minus1 + 1);
+        if (bp->du_hrd_params_present_flag) {
+          READ_UINT8 (nr, bp->nal_initial_alt_cpb_removal_delay[i][j],
+              bp->cpb_initial_removal_delay_length_minus1 + 1);
+          READ_UINT8 (nr, bp->nal_initial_alt_cpb_removal_offset[i][j],
+              bp->cpb_initial_removal_delay_length_minus1 + 1);
+        }
+      }
+    }
+
+    if (bp->vcl_hrd_params_present_flag) {
+      for (j = 0; j < bp->cpb_cnt_minus1 + 1; j++) {
+        READ_UINT8 (nr, bp->vcl_initial_cpb_removal_delay[i][j],
+            bp->cpb_initial_removal_delay_length_minus1 + 1);
+        READ_UINT8 (nr, bp->vcl_initial_cpb_removal_offset[i][j],
+            bp->cpb_initial_removal_delay_length_minus1 + 1);
+        if (bp->du_hrd_params_present_flag) {
+          READ_UINT8 (nr, bp->vcl_initial_alt_cpb_removal_delay[i][j],
+              bp->cpb_initial_removal_delay_length_minus1 + 1);
+          READ_UINT8 (nr, bp->vcl_initial_alt_cpb_removal_offset[i][j],
+              bp->cpb_initial_removal_delay_length_minus1 + 1);
+        }
+      }
+    }
+  }
+
+  if (bp->max_sublayers_minus1 > 0)
+    READ_UINT8 (nr, bp->sublayer_dpb_output_offsets_present_flag, 1);
+  if (bp->sublayer_dpb_output_offsets_present_flag) {
+    for (i = 0; i < bp->max_sublayers_minus1; i++)
+      READ_UE (nr, bp->dpb_output_tid_offset[i]);
+  }
+
+  READ_UINT8 (nr, bp->alt_cpb_params_present_flag, 1);
+  if (bp->alt_cpb_params_present_flag)
+    READ_UINT8 (nr, bp->use_alt_cpb_params_flag, 1);
+
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Buffering period\"");
+  return GST_H266_PARSER_ERROR;
+}
+
+static GstH266ParserResult
+gst_h266_parser_parse_pic_timing (GstH266PicTiming * pt,
+    NalReader * nr, const GstH266BufferingPeriod * bp, guint8 TemporalId)
+{
+  guint i, j;
+
+  GST_LOG ("parsing \"Picture timing\"");
+
+  READ_UINT8 (nr, pt->cpb_removal_delay_minus1[bp->max_sublayers_minus1],
+      bp->cpb_removal_delay_length_minus1 + 1);
+  pt->sublayer_delays_present_flag[bp->max_sublayers_minus1] = 1;
+
+  for (i = TemporalId; i < bp->max_sublayers_minus1; i++) {
+    READ_UINT8 (nr, pt->sublayer_delays_present_flag[i], 1);
+    if (pt->sublayer_delays_present_flag[i]) {
+      if (bp->cpb_removal_delay_deltas_present_flag)
+        READ_UINT8 (nr, pt->cpb_removal_delay_delta_enabled_flag[i], 1);
+
+      if (pt->cpb_removal_delay_delta_enabled_flag[i]) {
+        if (bp->num_cpb_removal_delay_deltas_minus1 > 0)
+          READ_UINT8 (nr, pt->cpb_removal_delay_delta_idx[i],
+              gst_util_ceil_log2 (bp->num_cpb_removal_delay_deltas_minus1 + 1));
+      } else {
+        READ_UINT8 (nr, pt->cpb_removal_delay_minus1[i],
+            bp->cpb_removal_delay_length_minus1 + 1);
+      }
+    }
+  }
+
+  READ_UINT8 (nr, pt->dpb_output_delay, bp->dpb_output_delay_length_minus1 + 1);
+
+  if (bp->alt_cpb_params_present_flag) {
+    READ_UINT8 (nr, pt->cpb_alt_timing_info_present_flag, 1);
+    if (pt->cpb_alt_timing_info_present_flag) {
+      if (bp->nal_hrd_params_present_flag) {
+        for (i = (bp->sublayer_initial_cpb_removal_delay_present_flag ? 0 :
+                bp->max_sublayers_minus1); i <= bp->max_sublayers_minus1; i++) {
+          for (j = 0; j < bp->cpb_cnt_minus1 + 1; j++) {
+            READ_UINT8 (nr, pt->nal_cpb_alt_initial_removal_delay_delta[i][j],
+                bp->cpb_initial_removal_delay_length_minus1 + 1);
+            READ_UINT8 (nr, pt->nal_cpb_alt_initial_removal_offset_delta[i][j],
+                bp->cpb_initial_removal_delay_length_minus1 + 1);
+          }
+
+          READ_UINT8 (nr, pt->nal_cpb_delay_offset[i],
+              bp->cpb_removal_delay_length_minus1 + 1);
+          READ_UINT8 (nr, pt->nal_dpb_delay_offset[i],
+              bp->cpb_removal_delay_length_minus1 + 1);
+        }
+      }
+
+      if (bp->vcl_hrd_params_present_flag) {
+        for (i = (bp->sublayer_initial_cpb_removal_delay_present_flag ? 0 :
+                bp->max_sublayers_minus1); i <= bp->max_sublayers_minus1; i++) {
+          for (j = 0; j < bp->cpb_cnt_minus1 + 1; j++) {
+            READ_UINT8 (nr, pt->vcl_cpb_alt_initial_removal_delay_delta[i][j],
+                bp->cpb_initial_removal_delay_length_minus1 + 1);
+            READ_UINT8 (nr, pt->vcl_cpb_alt_initial_removal_offset_delta[i][j],
+                bp->cpb_initial_removal_delay_length_minus1 + 1);
+          }
+
+          READ_UINT8 (nr, pt->vcl_cpb_delay_offset[i],
+              bp->cpb_removal_delay_length_minus1 + 1);
+          READ_UINT8 (nr, pt->vcl_dpb_delay_offset[i],
+              bp->cpb_removal_delay_length_minus1 + 1);
+        }
+      }
+    }
+  }
+
+  if (bp->du_hrd_params_present_flag &&
+      bp->du_dpb_params_in_pic_timing_sei_flag)
+    READ_UINT8 (nr, pt->dpb_output_du_delay,
+        bp->dpb_output_delay_du_length_minus1 + 1);
+
+  if (bp->du_hrd_params_present_flag &&
+      bp->du_cpb_params_in_pic_timing_sei_flag) {
+    READ_UE (nr, pt->num_decoding_units_minus1);
+    if (pt->num_decoding_units_minus1 > 0) {
+      READ_UINT8 (nr, pt->du_common_cpb_removal_delay_flag, 1);
+      if (pt->du_common_cpb_removal_delay_flag) {
+        for (i = TemporalId; i <= bp->max_sublayers_minus1; i++) {
+          if (pt->sublayer_delays_present_flag[i]) {
+            READ_UINT8 (nr, pt->du_common_cpb_removal_delay_increment_minus1[i],
+                bp->du_cpb_removal_delay_increment_length_minus1 + 1);
+          } else {
+            pt->du_common_cpb_removal_delay_increment_minus1[i] =
+                pt->du_common_cpb_removal_delay_increment_minus1
+                [bp->max_sublayers_minus1];
+          }
+        }
+      }
+
+      for (i = 0; i <= pt->num_decoding_units_minus1; i++) {
+        READ_UE (nr, pt->num_nalus_in_du_minus1[i]);
+
+        if (!pt->du_common_cpb_removal_delay_flag &&
+            i < pt->num_decoding_units_minus1)
+          for (j = TemporalId; j <= bp->max_sublayers_minus1; j++) {
+            if (pt->sublayer_delays_present_flag[j]) {
+              READ_UINT8 (nr, pt->du_cpb_removal_delay_increment_minus1[i][j],
+                  bp->du_cpb_removal_delay_increment_length_minus1 + 1);
+            } else {
+              pt->du_cpb_removal_delay_increment_minus1[i][j] =
+                  pt->du_cpb_removal_delay_increment_minus1[i]
+                  [bp->max_sublayers_minus1];
+            }
+
+            for (j = 0; j < TemporalId; j++)
+              pt->du_cpb_removal_delay_increment_minus1[i][j] =
+                  pt->du_cpb_removal_delay_increment_minus1[i]
+                  [bp->max_sublayers_minus1];
+          }
+      }
+    }
+
+    if (bp->additional_concatenation_info_present_flag)
+      READ_UINT8 (nr, pt->delay_for_concatenation_ensured_flag, 1);
+
+    READ_UINT8 (nr, pt->display_elemental_periods_minus1, 8);
+  }
+
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Picture timing\"");
+  return GST_H266_PARSER_ERROR;
+}
+
+static GstH266ParserResult
+gst_h266_parser_parse_du_info (GstH266DUInfo * dui, NalReader * nr,
+    const GstH266BufferingPeriod * bp, guint8 TemporalId)
+{
+  guint i;
+
+  GST_LOG ("parsing \"DU info\"");
+
+  READ_UE (nr, dui->decoding_unit_idx);
+
+  if (!bp->du_cpb_params_in_pic_timing_sei_flag) {
+    for (i = TemporalId; i <= bp->max_sublayers_minus1; i++) {
+      if (i < bp->max_sublayers_minus1)
+        READ_UINT8 (nr, dui->sublayer_delays_present_flag[i], 1);
+
+      if (dui->sublayer_delays_present_flag[i])
+        READ_UINT8 (nr, dui->du_cpb_removal_delay_increment[i],
+            bp->du_cpb_removal_delay_increment_length_minus1 + 1);
+    }
+  }
+
+  if (!bp->du_cpb_params_in_pic_timing_sei_flag)
+    dui->sublayer_delays_present_flag[bp->max_sublayers_minus1] = 1;
+
+  for (i = 0; i <= bp->max_sublayers_minus1; i++) {
+    if (i < bp->max_sublayers_minus1)
+      dui->du_cpb_removal_delay_increment[i] =
+          dui->du_cpb_removal_delay_increment[bp->max_sublayers_minus1];
+  }
+
+  if (!bp->du_dpb_params_in_pic_timing_sei_flag)
+    READ_UINT8 (nr, dui->dpb_output_du_delay_present_flag, 1);
+  if (dui->dpb_output_du_delay_present_flag)
+    READ_UINT8 (nr, dui->dpb_output_du_delay,
+        bp->dpb_output_delay_du_length_minus1 + 1);
+
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"DU info\"");
+  return GST_H266_PARSER_ERROR;
+}
+
+static GstH266ParserResult
+gst_h266_parser_parse_scalable_nesting (GstH266ScalableNesting * sn,
+    NalReader * nr)
+{
+  guint i;
+
+  GST_LOG ("parsing \"Scalable nesting\"");
+  /* check: max values here are not right */
+
+  READ_UINT8 (nr, sn->ols_flag, 1);
+  READ_UINT8 (nr, sn->subpic_flag, 1);
+  if (sn->ols_flag) {
+    READ_UE_MAX (nr, sn->num_olss_minus1, GST_H266_MAX_TOTAL_NUM_OLSS - 1);
+    for (i = 0; i <= sn->num_olss_minus1; i++)
+      READ_UE_MAX (nr, sn->ols_idx_delta_minus1[i],
+          GST_H266_MAX_TOTAL_NUM_OLSS - 2);
+  } else {
+    READ_UINT8 (nr, sn->all_layers_flag, 1);
+    if (!sn->all_layers_flag) {
+      READ_UE_MAX (nr, sn->num_layers_minus1, GST_H266_MAX_LAYERS);
+      for (i = 1; i <= sn->num_layers_minus1; i++)
+        READ_UINT8 (nr, sn->layer_id[i], 6);
+    }
+  }
+
+  if (sn->subpic_flag) {
+    READ_UE_MAX (nr, sn->num_subpics_minus1, GST_H266_MAX_SLICES_PER_AU - 1);
+    READ_UE_MAX (nr, sn->subpic_id_len_minus1, 15);
+    for (i = 0; i <= sn->num_subpics_minus1; i++)
+      READ_UINT8 (nr, sn->subpic_id[i], sn->subpic_id_len_minus1 + 1);
+  }
+
+  READ_UE_MAX (nr, sn->num_seis_minus1, 63);
+
+  while (!nal_reader_is_byte_aligned (nr))
+    if (!nal_reader_skip (nr, 1))
+      goto error;
+  /* not implemented yet
+     for( i = 0; i <= sn->num_seis_minus1; i++ )
+     sei_message()
+   */
+
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Scalable nesting\"");
+  return GST_H266_PARSER_ERROR;
+}
+
+static GstH266ParserResult
+gst_h266_parser_parse_subpic_level_info (GstH266SubPicLevelInfo * sli,
+    NalReader * nr)
+{
+  guint i, j, k;
+
+  GST_LOG ("parsing \"Subpic level info\"");
+
+  READ_UINT8 (nr, sli->num_ref_levels_minus1, 3);
+  READ_UINT8 (nr, sli->cbr_constraint_flag, 1);
+
+  READ_UINT8 (nr, sli->explicit_fraction_present_flag, 1);
+  if (sli->explicit_fraction_present_flag)
+    READ_UE_MAX (nr, sli->num_subpics_minus1, GST_H266_MAX_SLICES_PER_AU - 1);
+
+  READ_UINT8 (nr, sli->max_sublayers_minus1, 3);
+  READ_UINT8 (nr, sli->sublayer_info_present_flag, 1);
+
+  while (!nal_reader_is_byte_aligned (nr))
+    if (!nal_reader_skip (nr, 1))
+      goto error;
+
+  for (k = sli->sublayer_info_present_flag ? 0 : sli->max_sublayers_minus1;
+      k <= sli->max_sublayers_minus1; k++) {
+    for (i = 0; i <= sli->num_ref_levels_minus1; i++) {
+      READ_UINT8 (nr, sli->non_subpic_layers_fraction[i][k], 8);
+      READ_UINT8 (nr, sli->ref_level_idc[i][k], 8);
+
+      if (sli->explicit_fraction_present_flag) {
+        for (j = 0; j <= sli->num_subpics_minus1; j++)
+          READ_UINT8 (nr, sli->ref_level_fraction_minus1[i][j][k], 8);
+      }
+    }
+  }
+
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Subpic level info\"");
+  return GST_H266_PARSER_ERROR;
+}
+
+static GstH266ParserResult
+gst_h266_parser_parse_frame_field_info (GstH266FrameFieldInfo * ffi,
+    NalReader * nr)
+{
+  GST_LOG ("parsing \"Frame field info\"");
+
+  READ_UINT8 (nr, ffi->field_pic_flag, 1);
+  if (ffi->field_pic_flag) {
+    READ_UINT8 (nr, ffi->bottom_field_flag, 1);
+    READ_UINT8 (nr, ffi->pairing_indicated_flag, 1);
+    if (ffi->pairing_indicated_flag)
+      READ_UINT8 (nr, ffi->paired_with_next_field_flag, 1);
+  } else {
+    READ_UINT8 (nr, ffi->display_fields_from_frame_flag, 1);
+    if (ffi->display_fields_from_frame_flag)
+      READ_UINT8 (nr, ffi->top_field_first_flag, 1);
+
+    READ_UINT8 (nr, ffi->display_elemental_periods_minus1, 8);
+  }
+
+  READ_UINT8 (nr, ffi->source_scan_type, 2);
+  READ_UINT8 (nr, ffi->duplicate_flag, 1);
+
+  ffi->valid = TRUE;
+
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Frame field info\"");
+  return GST_H266_PARSER_ERROR;
+}
+
 /**
  * gst_h266_parser_new:
  *
@@ -1457,6 +1923,48 @@ gst_h266_parser_identify_nalu_vvc (GstH266Parser * parser,
   return GST_H266_PARSER_OK;
 }
 
+/**
+ * gst_h266_parser_parse_nal:
+ * @parser: a #GstH266Parser
+ * @nalu: The #GstH266NalUnit to parse
+ *
+ * This function should be called in the case one doesn't need to
+ * parse a specific structure. It is necessary to do so to make
+ * sure @parser is up to date.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parser_parse_nal (GstH266Parser * parser, GstH266NalUnit * nalu)
+{
+  GstH266VPS vps;
+  GstH266SPS sps;
+  GstH266PPS pps;
+  GstH266APS aps;
+
+  switch (nalu->type) {
+    case GST_H266_NAL_VPS:
+      return gst_h266_parser_parse_vps (parser, nalu, &vps);
+      break;
+    case GST_H266_NAL_SPS:
+      return gst_h266_parser_parse_sps (parser, nalu, &sps);
+      break;
+    case GST_H266_NAL_PPS:
+      return gst_h266_parser_parse_pps (parser, nalu, &pps);
+      break;
+    case GST_H266_NAL_PREFIX_APS:
+    case GST_H266_NAL_SUFFIX_APS:
+      return gst_h266_parser_parse_aps (parser, nalu, &aps);
+      break;
+    default:
+      break;
+  }
+
+  return GST_H266_PARSER_OK;
+}
+
 /**
  * gst_h266_parser_parse_vps:
  * @parser: a #GstH266Parser
@@ -2836,77 +3344,2605 @@ error:
   return GST_H266_PARSER_ERROR;
 }
 
-/**
- * gst_h266_parse_aps:
- * @parser: a #GstH266Parser
- * @nalu: The #GST_H266_APS_NUT #GstH266NalUnit to parse
- * @pps: The #GstH266PPS to fill.
- *
- * Parses @data, and fills the @aps structure.
- *
- * Returns: a #GstH266ParserResult
- *
- * Since: 1.26
- */
-GstH266ParserResult
-gst_h266_parse_aps (GstH266Parser * parser, GstH266NalUnit * nalu,
-    GstH266APS * aps)
+static gboolean
+gst_h266_parser_parse_tile_info (GstH266SPS * sps,
+    GstH266PPS * pps, NalReader * nr)
 {
-  NalReader nr;
-  guint8 params_type;
+  guint exp_tile_width = 0, exp_tile_height = 0;
+  guint unified_size, remaining_size;
+  gint i;
 
-  GST_LOG ("parsing APS");
+  GST_LOG ("parsing \"Tile Info\"");
 
-  nal_reader_init (&nr, nalu->data + nalu->offset + nalu->header_bytes,
-      nalu->size - nalu->header_bytes);
+  READ_UE_MAX (nr, pps->num_exp_tile_columns_minus1,
+      MIN (pps->pic_width_in_ctbs_y - 1, GST_H266_MAX_TILE_COLUMNS - 1));
+  READ_UE_MAX (nr, pps->num_exp_tile_rows_minus1,
+      MIN (pps->pic_height_in_ctbs_y - 1, GST_H266_MAX_TILE_ROWS - 1));
 
-  memset (aps, 0, sizeof (*aps));
+  for (i = 0; i <= pps->num_exp_tile_columns_minus1; i++) {
+    READ_UE_MAX (nr, pps->tile_column_width_minus1[i],
+        pps->pic_width_in_ctbs_y - exp_tile_width - 1);
+    exp_tile_width += pps->tile_column_width_minus1[i] + 1;
+  }
 
-  READ_UINT8 (&nr, params_type, 3);
-  aps->params_type = params_type;
-  READ_UINT8 (&nr, aps->aps_id, 5);
-  CHECK_ALLOWED_MAX (aps->aps_id, GST_H266_MAX_APS_COUNT);
-  READ_UINT8 (&nr, aps->chroma_present_flag, 1);
+  remaining_size = pps->pic_width_in_ctbs_y - exp_tile_width;
+  unified_size = (i == 0 ? pps->pic_width_in_ctbs_y :
+      (pps->tile_column_width_minus1[i - 1] + 1));
 
-  switch (aps->params_type) {
-    case GST_H266_ALF_APS:
-      if (!gst_h266_parse_alf (&aps->alf, &nr, aps->chroma_present_flag))
-        goto error;
-      break;
-    case GST_H266_LMCS_APS:
-      if (!gst_h266_parse_lmcs (&aps->lmcs, &nr, aps->chroma_present_flag))
-        goto error;
-      break;
-    case GST_H266_SCALING_APS:
-      if (!gst_h266_parse_scaling_list (&aps->sl, &nr,
-              aps->chroma_present_flag))
-        goto error;
-      break;
-    default:
-      GST_WARNING ("unknown APS params_type %d", aps->params_type);
-      goto error;
-      break;
+  pps->num_tile_columns =
+      i + ((remaining_size + unified_size - 1) / unified_size);
+  if (pps->num_tile_columns > GST_H266_MAX_TILE_COLUMNS) {
+    GST_WARNING ("NumTileColumns(%d) large than max tile columns %d.\n",
+        pps->num_tile_columns, GST_H266_MAX_TILE_COLUMNS);
+    goto error;
   }
 
-  READ_UINT8 (&nr, aps->extension_flag, 1);
-  if (aps->extension_flag) {
-    READ_UINT8 (&nr, aps->extension_data_flag, 1);
-    if (aps->extension_data_flag) {
-      GST_WARNING ("extension_data_flag shall be equal to 0 "
-          "in current version aps.");
-      goto error;
-    }
+  while (remaining_size > unified_size) {
+    pps->tile_column_width_minus1[i] = unified_size - 1;
+    remaining_size -= unified_size;
+    i++;
   }
+  if (remaining_size > 0)
+    pps->tile_column_width_minus1[i] = remaining_size - 1;
 
-  aps->valid = TRUE;
-  return GST_H266_PARSER_OK;
+  for (i = 0; i <= pps->num_exp_tile_rows_minus1; i++) {
+    READ_UE_MAX (nr, pps->tile_row_height_minus1[i],
+        pps->pic_height_in_ctbs_y - exp_tile_height - 1);
+    exp_tile_height += pps->tile_row_height_minus1[i] + 1;
+  }
+
+  remaining_size = pps->pic_height_in_ctbs_y - exp_tile_height;
+  unified_size = (i == 0 ? pps->pic_height_in_ctbs_y :
+      (pps->tile_row_height_minus1[i - 1] + 1));
+
+  pps->num_tile_rows = i + ((remaining_size + unified_size - 1) / unified_size);
+  if (pps->num_tile_rows > GST_H266_MAX_TILE_ROWS) {
+    GST_WARNING ("NumTileRows(%d) large than max tile rows %d.\n",
+        pps->num_tile_rows, GST_H266_MAX_TILE_ROWS);
+    goto error;
+  }
+
+  while (remaining_size > unified_size) {
+    pps->tile_row_height_minus1[i] = unified_size - 1;
+    remaining_size -= unified_size;
+    i++;
+  }
+  if (remaining_size > 0)
+    pps->tile_row_height_minus1[i] = remaining_size - 1;
+
+  pps->num_tiles_in_pic = pps->num_tile_columns * pps->num_tile_rows;
+  if (pps->num_tiles_in_pic > GST_H266_MAX_TILES_PER_AU) {
+    GST_WARNING ("NumTilesInPic(%d) large than max tiles per AU %d.\n",
+        pps->num_tiles_in_pic, GST_H266_MAX_TILES_PER_AU);
+    goto error;
+  }
+
+  if (pps->num_tiles_in_pic > 1) {
+    READ_UINT8 (nr, pps->loop_filter_across_tiles_enabled_flag, 1);
+    READ_UINT8 (nr, pps->rect_slice_flag, 1);
+  } else {
+    pps->loop_filter_across_tiles_enabled_flag = 0;
+    pps->rect_slice_flag = 1;
+  }
+
+  pps->tile_col_bd_val[0] = 0;
+  for (i = 0; i < pps->num_tile_columns; i++) {
+    pps->tile_col_bd_val[i + 1] =
+        pps->tile_col_bd_val[i] + pps->tile_column_width_minus1[i] + 1;
+  }
+  pps->tile_row_bd_val[0] = 0;
+  for (i = 0; i < pps->num_tile_rows; i++) {
+    pps->tile_row_bd_val[i + 1] =
+        pps->tile_row_bd_val[i] + pps->tile_row_height_minus1[i] + 1;
+  }
+
+  return TRUE;
+
+error:
+  GST_WARNING ("error parsing \"Tile Info\"");
+  return FALSE;
+}
+
+static gboolean
+gst_h266_parser_parse_picture_partition (GstH266SPS * sps,
+    GstH266PPS * pps, NalReader * nr)
+{
+  guint16 tile_idx, tile_x, tile_y, ctu_x, ctu_y;
+  gint i, j;
+
+  GST_LOG ("parsing \"Picture Partition\"");
+
+  READ_UINT8 (nr, pps->log2_ctu_size_minus5, 2);
+  if (pps->log2_ctu_size_minus5 != sps->log2_ctu_size_minus5) {
+    GST_WARNING ("pps_log2_ctu_size_minus5 shall be equal "
+        "to sps_log2_ctu_size_minus5");
+    goto error;
+  }
+
+  if (!gst_h266_parser_parse_tile_info (sps, pps, nr))
+    goto error;
+
+  if (pps->rect_slice_flag) {
+    READ_UINT8 (nr, pps->single_slice_per_subpic_flag, 1);
+  } else {
+    pps->single_slice_per_subpic_flag = 0;
+  }
+
+  if (pps->rect_slice_flag) {
+    if (!pps->single_slice_per_subpic_flag) {
+      tile_idx = 0;
+
+      READ_UE_MAX (nr, pps->num_slices_in_pic_minus1,
+          GST_H266_MAX_SLICES_PER_AU - 1);
+      if (pps->num_slices_in_pic_minus1 > 1) {
+        READ_UINT8 (nr, pps->tile_idx_delta_present_flag, 1);
+      } else {
+        pps->tile_idx_delta_present_flag = 0;
+      }
+
+      /* Handle the last one after this loop */
+      for (i = 0; i < pps->num_slices_in_pic_minus1; i++) {
+        pps->slice_top_left_tile_idx[i] = tile_idx;
+        tile_x = tile_idx % pps->num_tile_columns;
+        tile_y = tile_idx / pps->num_tile_columns;
+
+        if (tile_x != pps->num_tile_columns - 1) {
+          READ_UE_MAX (nr, pps->slice_width_in_tiles_minus1[i],
+              pps->num_tile_columns - 1);
+        } else {
+          pps->slice_width_in_tiles_minus1[i] = 0;
+        }
+
+        if (tile_y != pps->num_tile_rows - 1 &&
+            (pps->tile_idx_delta_present_flag || tile_x == 0)) {
+          READ_UE_MAX (nr, pps->slice_height_in_tiles_minus1[i],
+              pps->num_tile_rows - 1);
+        } else {
+          if (tile_y == pps->num_tile_rows - 1) {
+            pps->slice_height_in_tiles_minus1[i] = 0;
+          } else {
+            /* tile_x != 0, so i should be > 0 when we get here. */
+            pps->slice_height_in_tiles_minus1[i] =
+                pps->slice_height_in_tiles_minus1[i - 1];
+          }
+        }
+
+        ctu_x = pps->tile_col_bd_val[tile_x];
+        ctu_y = pps->tile_row_bd_val[tile_y];
+
+        /* slice is no bigger than tile */
+        if (pps->slice_width_in_tiles_minus1[i] == 0 &&
+            pps->slice_height_in_tiles_minus1[i] == 0 &&
+            pps->tile_row_height_minus1[tile_y] > 0) {
+          gint num_slices_in_tile, uniform_slice_height,
+              remaining_height_in_ctbs_y;
+          gint k;
+
+          remaining_height_in_ctbs_y = pps->tile_row_height_minus1[tile_y] + 1;
+
+          READ_UE_MAX (nr, pps->num_exp_slices_in_tile[i],
+              pps->tile_row_height_minus1[tile_y]);
+
+          /* slice is equal to tile */
+          if (pps->num_exp_slices_in_tile[i] == 0) {
+            num_slices_in_tile = 1;
+            pps->slice_top_left_ctu_x[i] = ctu_x;
+            pps->slice_top_left_ctu_y[i] = ctu_y;
+            pps->slice_height_in_ctus[i] =
+                pps->tile_row_height_minus1[tile_y] + 1;
+          } else {              /* tile contains multi slices */
+            guint16 slice_height_in_ctus;
+
+            for (j = 0; j < pps->num_exp_slices_in_tile[i]; j++) {
+              READ_UE_MAX (nr, pps->exp_slice_height_in_ctus_minus1[i][j],
+                  pps->tile_row_height_minus1[tile_y]);
+
+              slice_height_in_ctus =
+                  pps->exp_slice_height_in_ctus_minus1[i][j] + 1;
+              pps->slice_height_in_ctus[i + j] = slice_height_in_ctus;
+
+              pps->slice_top_left_ctu_x[i + j] = ctu_x;
+              pps->slice_top_left_ctu_y[i + j] = ctu_y;
+
+              ctu_y += slice_height_in_ctus;
+              remaining_height_in_ctbs_y -= slice_height_in_ctus;
+            }
+
+            uniform_slice_height =
+                1 + pps->exp_slice_height_in_ctus_minus1[i][j - 1];
+
+            /* Assign the remaining CTBs to slices */
+            while (remaining_height_in_ctbs_y > uniform_slice_height) {
+              if (i + j > pps->num_slices_in_pic_minus1) {
+                GST_WARNING ("Too may slices %d", i + j + 1);
+                goto error;
+              }
+
+              pps->slice_height_in_ctus[i + j] = uniform_slice_height;
+
+              pps->slice_top_left_ctu_x[i + j] = ctu_x;
+              pps->slice_top_left_ctu_y[i + j] = ctu_y;
+
+              ctu_y += uniform_slice_height;
+              remaining_height_in_ctbs_y -= uniform_slice_height;
+              j++;
+            }
+
+            if (remaining_height_in_ctbs_y > 0) {
+              if (i + j > pps->num_slices_in_pic_minus1) {
+                GST_WARNING ("Too may slices %d", i + j + 1);
+                goto error;
+              }
+
+              pps->slice_height_in_ctus[i + j] = remaining_height_in_ctbs_y;
+              pps->slice_top_left_ctu_x[i + j] = ctu_x;
+              pps->slice_top_left_ctu_y[i + j] = ctu_y;
+              j++;
+            }
+
+            num_slices_in_tile = j;
+          }
+
+          /* slice_top_left_tile_idx[0] already set */
+          for (k = 1; k < num_slices_in_tile; k++)
+            pps->slice_top_left_tile_idx[i + k] = tile_idx;
+
+          i += num_slices_in_tile - 1;
+        } else {                /* Slice may contain multi tiles. */
+          guint16 height = 0;
+
+          pps->num_exp_slices_in_tile[i] = 0;
+
+          for (j = 0; j <= pps->slice_height_in_tiles_minus1[i]; j++)
+            height += pps->tile_row_height_minus1[tile_y + j] + 1;
+          pps->slice_height_in_ctus[i] = height;
+
+          pps->slice_top_left_ctu_x[i] = ctu_x;
+          pps->slice_top_left_ctu_y[i] = ctu_y;
+        }
+
+        if (i < pps->num_slices_in_pic_minus1) {
+          if (pps->tile_idx_delta_present_flag) {
+            gint num_tiles_in_pic = pps->num_tiles_in_pic;
+
+            READ_SE_ALLOWED (nr, pps->tile_idx_delta_val[i],
+                -num_tiles_in_pic + 1, num_tiles_in_pic - 1);
+            if (pps->tile_idx_delta_val[i] == 0) {
+              /* When present, the value of pps_tile_idx_delta_val[i]
+                 shall not be equal to 0. */
+              GST_WARNING ("pps->tile_idx_delta_val[i] shall not be"
+                  " equal to 0.\n");
+              goto error;
+            }
+
+            tile_idx += pps->tile_idx_delta_val[i];
+          } else {
+            pps->tile_idx_delta_val[i] = 0;
+
+            tile_idx += pps->slice_width_in_tiles_minus1[i] + 1;
+            if (tile_idx % pps->num_tile_columns == 0) {
+              tile_idx += pps->slice_height_in_tiles_minus1[i] *
+                  pps->num_tile_columns;
+            }
+          }
+        }
+      }
+
+      if (i > pps->num_slices_in_pic_minus1 + 1) {
+        GST_WARNING ("wrong slice num %d, bigger than total slice num %d",
+            i, pps->num_slices_in_pic_minus1 + 1);
+        goto error;
+      } else if (i == pps->num_slices_in_pic_minus1) {
+        /* Assign the left to the last slice if not explicitly assigned. */
+        guint16 height = 0;
+
+        pps->slice_top_left_tile_idx[i] = tile_idx;
+
+        tile_x = tile_idx % pps->num_tile_columns;
+        tile_y = tile_idx / pps->num_tile_columns;
+        ctu_x = 0, ctu_y = 0;
+        for (j = 0; j < tile_x; j++)
+          ctu_x += pps->tile_column_width_minus1[j] + 1;
+        for (j = 0; j < tile_y; j++)
+          ctu_y += pps->tile_row_height_minus1[j] + 1;
+
+        pps->slice_top_left_ctu_x[i] = ctu_x;
+        pps->slice_top_left_ctu_y[i] = ctu_y;
+
+        pps->slice_width_in_tiles_minus1[i] =
+            pps->num_tile_columns - tile_x - 1;
+        pps->slice_height_in_tiles_minus1[i] = pps->num_tile_rows - tile_y - 1;
+
+        for (j = 0; j <= pps->slice_height_in_tiles_minus1[i]; j++)
+          height += pps->tile_row_height_minus1[tile_y + j] + 1;
+        pps->slice_height_in_ctus[i] = height;
+
+        pps->num_exp_slices_in_tile[i] = 0;
+      }
+
+      /* calculate NumSlicesInSubpic */
+      for (i = 0; i <= sps->num_subpics_minus1; i++) {
+        pps->num_slices_in_subpic[i] = 0;
+
+        for (j = 0; j <= pps->num_slices_in_pic_minus1; j++) {
+          guint16 pos_x = pps->slice_top_left_ctu_x[j];
+          guint16 pos_y = pps->slice_top_left_ctu_y[j];
+
+          if ((pos_x >= sps->subpic_ctu_top_left_x[i]) &&
+              (pos_x < sps->subpic_ctu_top_left_x[i] +
+                  sps->subpic_width_minus1[i] + 1) &&
+              (pos_y >= sps->subpic_ctu_top_left_y[i])
+              && (pos_y < sps->subpic_ctu_top_left_y[i] +
+                  sps->subpic_height_minus1[i] + 1))
+            pps->num_slices_in_subpic[i]++;
+        }
+      }
+    } else {
+      gint start_x, start_y;
+
+      pps->num_slices_in_pic_minus1 = sps->num_subpics_minus1;
+      for (i = 0; i <= sps->num_subpics_minus1; i++) {
+        start_x = -1;
+        start_y = -1;
+
+        pps->num_slices_in_subpic[i] = 1;
+
+        for (tile_y = 0; tile_y < pps->num_tile_rows; tile_y++) {
+          for (tile_x = 0; tile_x < pps->num_tile_columns; tile_x++) {
+            if ((pps->tile_col_bd_val[tile_x] >= sps->subpic_ctu_top_left_x[i])
+                && (pps->tile_col_bd_val[tile_x] < sps->subpic_ctu_top_left_x[i]
+                    + sps->subpic_width_minus1[i] + 1)
+                && (pps->tile_row_bd_val[tile_y] >=
+                    sps->subpic_ctu_top_left_y[i])
+                && (pps->tile_row_bd_val[tile_y] < sps->subpic_ctu_top_left_y[i]
+                    + sps->subpic_height_minus1[i] + 1)) {
+              if (start_x == -1) {
+                start_x = tile_x;
+                start_y = tile_y;
+              }
+              pps->slice_width_in_tiles_minus1[i] = tile_x - start_x;
+              pps->slice_height_in_tiles_minus1[i] = tile_y - start_y;
+            }
+          }
+        }
+
+        if (start_x == -1) {
+          GST_WARNING ("No tile found for subpic start at: [%d, %d], "
+              "size: [%d, %d] in CTUs", sps->subpic_ctu_top_left_x[i],
+              sps->subpic_ctu_top_left_y[i], sps->subpic_width_minus1[i] + 1,
+              sps->subpic_height_minus1[i] + 1);
+          goto error;
+        }
+
+        pps->slice_top_left_tile_idx[i] =
+            start_x + start_y * pps->num_tile_columns;
+        pps->slice_top_left_ctu_x[i] = sps->subpic_ctu_top_left_x[i];
+        pps->slice_top_left_ctu_y[i] = sps->subpic_ctu_top_left_y[i];
+        pps->slice_height_in_ctus[i] = sps->subpic_height_minus1[i] + 1;
+      }
+    }
+  }
+
+  if (!pps->rect_slice_flag || pps->single_slice_per_subpic_flag ||
+      pps->num_slices_in_pic_minus1 > 0) {
+    READ_UINT8 (nr, pps->loop_filter_across_slices_enabled_flag, 1);
+  } else {
+    pps->loop_filter_across_slices_enabled_flag = 0;
+  }
+
+  return TRUE;
+
+error:
+  GST_WARNING ("error parsing \"Picture Partition\"");
+  return FALSE;
+}
+
+static guint16
+gst_h266_parser_add_slice_ctus_map (GstH266Parser * parser,
+    const GstH266PPS * pps, guint slice_start_offset,
+    guint ctu_x, guint ctu_y, guint width, guint height)
+{
+  guint x, y;
+  guint16 ctb_count = 0;
+
+  for (y = ctu_y; y < ctu_y + height; y++) {
+    for (x = ctu_x; x < ctu_x + width; x++) {
+      /* CtbAddrInRs */
+      parser->ctb_addr_in_slice[slice_start_offset + ctb_count] =
+          y * pps->pic_width_in_ctbs_y + x;
+      ctb_count++;
+    }
+  }
+
+  return ctb_count;
+}
+
+static gboolean
+gst_h266_parser_generate_ctb_map (GstH266Parser * parser,
+    const GstH266PPS * pps)
+{
+  gint tile_y, tile_x, ctu_y, ctu_x;
+  guint ctb_addr_x, ctb_addr_y;
+  gint ctu_idx = 0;
+  gint i, j, k;
+
+  memset (parser->ctb_addr_in_slice, 0, sizeof (parser->ctb_addr_in_slice));
+  memset (parser->slice_start_offset, 0, sizeof (parser->slice_start_offset));
+  memset (parser->num_ctus_in_slice, 0, sizeof (parser->num_ctus_in_slice));
+  memset (parser->ctb_to_tile_col_bd, 0, sizeof (parser->ctb_to_tile_col_bd));
+  memset (parser->ctb_to_tile_row_bd, 0, sizeof (parser->ctb_to_tile_row_bd));
+
+  if (pps->pic_size_in_ctbs_y >= GST_H266_MAX_CTUS_IN_PICTURE) {
+    GST_WARNING ("Too many CTBs %d", pps->pic_size_in_ctbs_y);
+    return FALSE;
+  }
+
+  tile_x = 0, tile_y = 0;
+  for (ctb_addr_x = 0; ctb_addr_x < pps->pic_width_in_ctbs_y; ctb_addr_x++) {
+    if (ctb_addr_x == pps->tile_col_bd_val[tile_x + 1])
+      tile_x++;
+    parser->ctb_to_tile_col_bd[ctb_addr_x] = pps->tile_col_bd_val[tile_x];
+  }
+  parser->ctb_to_tile_col_bd[pps->pic_width_in_ctbs_y] =
+      pps->pic_width_in_ctbs_y;
+
+  for (ctb_addr_y = 0; ctb_addr_y < pps->pic_height_in_ctbs_y; ctb_addr_y++) {
+    if (ctb_addr_y == pps->tile_row_bd_val[tile_y + 1])
+      tile_y++;
+    parser->ctb_to_tile_row_bd[ctb_addr_y] = pps->tile_row_bd_val[tile_y];
+  }
+  parser->ctb_to_tile_row_bd[pps->pic_height_in_ctbs_y] =
+      pps->pic_height_in_ctbs_y;
+
+
+  /* Map between raster scan address and CTU address.
+   * For non rect slice mode, the slice number for each picture is not
+   * fixed, we only need to establish the map based on tile info.
+   *
+   * For rect slice mode, the slice structure for each picture is fixed
+   * based on the PPS info. So beside the map, we can also know the
+   * slice_start_offset and num_ctus_in_slice for each slice.
+   */
+  if (!pps->no_pic_partition_flag && pps->rect_slice_flag) {
+    guint16 ctb_count;
+    guint16 slice_start_offset = 0;
+
+    for (i = 0; i <= pps->num_slices_in_pic_minus1; i++) {
+      tile_x = pps->slice_top_left_tile_idx[i] % pps->num_tile_columns;
+      tile_y = pps->slice_top_left_tile_idx[i] / pps->num_tile_columns;
+
+      if (pps->slice_width_in_tiles_minus1[i] == 0 &&
+          pps->slice_height_in_tiles_minus1[i] == 0) {
+        /* Slice contains no more than one tile, the slice_top_left_ctu_x/y
+           and slice_height_in_ctus give all the info. */
+        ctb_count = gst_h266_parser_add_slice_ctus_map (parser,
+            pps, slice_start_offset, pps->slice_top_left_ctu_x[i],
+            pps->slice_top_left_ctu_y[i],
+            pps->tile_column_width_minus1[tile_x] + 1,
+            pps->slice_height_in_ctus[i]);
+
+        parser->slice_start_offset[i] = slice_start_offset;
+        parser->num_ctus_in_slice[i] = ctb_count;
+        slice_start_offset += ctb_count;
+      } else {
+        guint16 ctu_x, ctu_y, ctu_width, ctu_height;
+
+        g_assert (pps->tile_col_bd_val[tile_x] == pps->slice_top_left_ctu_x[i]);
+        g_assert (pps->tile_row_bd_val[tile_y] == pps->slice_top_left_ctu_y[i]);
+
+        parser->slice_start_offset[i] = slice_start_offset;
+
+        for (j = 0; j <= pps->slice_height_in_tiles_minus1[i]; j++) {
+          for (k = 0; k <= pps->slice_width_in_tiles_minus1[i]; k++) {
+            ctu_x = pps->tile_col_bd_val[tile_x + k];
+            ctu_y = pps->tile_row_bd_val[tile_y + j];
+            ctu_width = pps->tile_column_width_minus1[tile_x + k] + 1;
+            ctu_height = pps->tile_row_height_minus1[tile_y + j] + 1;
+
+            ctb_count = gst_h266_parser_add_slice_ctus_map (parser,
+                pps, slice_start_offset, ctu_x, ctu_y, ctu_width, ctu_height);
+            slice_start_offset += ctb_count;
+          }
+        }
+
+        parser->num_ctus_in_slice[i] =
+            slice_start_offset - parser->slice_start_offset[i];
+      }
+    }
+  } else {
+    for (tile_y = 0; tile_y < pps->num_tile_rows; tile_y++) {
+      for (tile_x = 0; tile_x < pps->num_tile_columns; tile_x++) {
+        for (ctu_y = pps->tile_row_bd_val[tile_y];
+            ctu_y < pps->tile_row_bd_val[tile_y] +
+            pps->tile_row_height_minus1[tile_y] + 1; ctu_y++) {
+          for (ctu_x = pps->tile_col_bd_val[tile_x];
+              ctu_x < pps->tile_col_bd_val[tile_x] +
+              pps->tile_column_width_minus1[tile_x] + 1; ctu_x++) {
+            g_assert (ctu_idx < pps->pic_size_in_ctbs_y);
+            parser->ctb_addr_in_slice[ctu_idx++] =
+                ctu_y * pps->pic_width_in_ctbs_y + ctu_x;
+          }
+        }
+      }
+    }
+  }
+
+  return TRUE;
+}
+
+static gboolean
+gst_h266_parser_set_active_sps_pps (GstH266Parser * parser,
+    const GstH266SPS * sps, const GstH266PPS * pps)
+{
+  gboolean need_update = FALSE;
+
+  g_assert (sps->vps);
+  g_assert (sps->valid);
+  g_assert (pps->valid);
+
+  if (sps->vps != parser->active_vps) {
+    parser->active_vps = (GstH266VPS *) sps->vps;
+    need_update = TRUE;
+  }
+
+  if (sps != parser->active_sps) {
+    parser->active_sps = (GstH266SPS *) sps;
+    need_update = TRUE;
+  }
+
+  if (pps != parser->active_pps) {
+    parser->active_pps = (GstH266PPS *) pps;
+    need_update = TRUE;
+  }
+
+  if (need_update) {
+    if (!gst_h266_parser_generate_ctb_map (parser, pps))
+      return FALSE;
+
+    GST_LOG ("set active VPS:%d, SPS:%d, PPS:%d",
+        sps->vps->vps_id, sps->sps_id, pps->pps_id);
+  }
+
+  return TRUE;
+}
+
+/**
+ * gst_h266_parser_parse_pps:
+ * @parser: a #GstH266Parser
+ * @nalu: The #GST_H266_NAL_PPS #GstH266NalUnit to parse
+ * @pps: The #GstH266PPS to fill.
+ *
+ * Parses @data, and fills the @pps structure.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parser_parse_pps (GstH266Parser * parser,
+    GstH266NalUnit * nalu, GstH266PPS * pps)
+{
+  GstH266ParserResult res = gst_h266_parse_pps (parser, nalu, pps);
+
+  if (res == GST_H266_PARSER_OK) {
+    GST_LOG ("adding picture parameter set with id: %d to array", pps->pps_id);
+
+    if (parser->active_pps && parser->active_pps->pps_id == pps->pps_id)
+      parser->active_pps = NULL;
+
+    parser->pps[pps->pps_id] = *pps;
+    parser->last_pps = &parser->pps[pps->pps_id];
+  }
+
+  return res;
+}
+
+/**
+ * gst_h266_parse_pps:
+ * @parser: a #GstH266Parser
+ * @nalu: The #GST_H266_NAL_PPS #GstH266NalUnit to parse
+ * @pps: The #GstH266PPS to fill.
+ *
+ * Parses @data, and fills the @pps structure.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parse_pps (GstH266Parser * parser, GstH266NalUnit * nalu,
+    GstH266PPS * pps)
+{
+  NalReader nr;
+  GstH266SPS *sps;
+  gint min_cb_size_y, ctb_size_y;
+  guint8 sub_width_c, sub_height_c;
+  const guint8 h266_sub_width_c[] = { 1, 2, 2, 1 };
+  const guint8 h266_sub_height_c[] = { 1, 2, 1, 1 };
+  gint QpBdOffset, i;
+
+  GST_LOG ("parsing \"Picture parameter set\"");
+
+  nal_reader_init (&nr, nalu->data + nalu->offset + nalu->header_bytes,
+      nalu->size - nalu->header_bytes);
+
+  memset (pps, 0, sizeof (*pps));
+
+  READ_UINT8 (&nr, pps->pps_id, 6);
+  READ_UINT8 (&nr, pps->sps_id, 4);
+
+  sps = gst_h266_parser_get_sps (parser, pps->sps_id);
+  if (!sps) {
+    GST_WARNING ("couldn't find associated sequence parameter set with id: %d",
+        pps->sps_id);
+    return GST_H266_PARSER_BROKEN_LINK;
+  }
+  pps->sps = sps;
+
+  ctb_size_y = 1 << (sps->log2_ctu_size_minus5 + 5);
+  min_cb_size_y = 1 << (sps->log2_min_luma_coding_block_size_minus2 + 2);
+  sub_width_c = h266_sub_width_c[sps->chroma_format_idc];
+  sub_height_c = h266_sub_height_c[sps->chroma_format_idc];
+
+  READ_UINT8 (&nr, pps->mixed_nalu_types_in_pic_flag, 1);
+
+  READ_UE_ALLOWED (&nr, pps->pic_width_in_luma_samples, 1,
+      sps->pic_width_max_in_luma_samples);
+  READ_UE_ALLOWED (&nr, pps->pic_height_in_luma_samples, 1,
+      sps->pic_height_max_in_luma_samples);
+
+  if (pps->pic_width_in_luma_samples % MAX (min_cb_size_y, 8) ||
+      pps->pic_height_in_luma_samples % MAX (min_cb_size_y, 8)) {
+    GST_WARNING ("Invalid dimensions: %ux%u not divisible "
+        "by %u, MinCbSizeY = %u.\n", pps->pic_width_in_luma_samples,
+        pps->pic_height_in_luma_samples, MAX (min_cb_size_y, 8), min_cb_size_y);
+    goto error;
+  }
+
+  if (!sps->res_change_in_clvs_allowed_flag &&
+      (pps->pic_width_in_luma_samples !=
+          sps->pic_width_max_in_luma_samples ||
+          pps->pic_height_in_luma_samples !=
+          sps->pic_height_max_in_luma_samples)) {
+    GST_WARNING ("Resoltuion change is not allowed, "
+        "resolution sps(%ux%u) mismatched with pps(%ux%u).\n",
+        sps->pic_width_max_in_luma_samples,
+        sps->pic_height_max_in_luma_samples,
+        pps->pic_width_in_luma_samples, pps->pic_height_in_luma_samples);
+    goto error;
+  }
+
+  if (sps->ref_wraparound_enabled_flag) {
+    if ((ctb_size_y / min_cb_size_y + 1) >
+        (pps->pic_width_in_luma_samples / min_cb_size_y - 1)) {
+      GST_WARNING ("The value %d of (CtbSizeY / MinCbSizeY + 1) shall be "
+          "less than or equal to the value %d of "
+          "(pps_pic_width_in_luma_samples / MinCbSizeY - 1).",
+          ctb_size_y / min_cb_size_y + 1,
+          pps->pic_width_in_luma_samples / min_cb_size_y - 1);
+      goto error;
+    }
+  }
+
+  READ_UINT8 (&nr, pps->conformance_window_flag, 1);
+  if (pps->conformance_window_flag &&
+      pps->pic_width_in_luma_samples == sps->pic_width_max_in_luma_samples &&
+      pps->pic_height_in_luma_samples == sps->pic_height_max_in_luma_samples) {
+    GST_WARNING ("When pps_pic_width_in_luma_samples is equal to "
+        "sps_pic_width_max_in_luma_samples and pps_pic_height_in_luma_samples "
+        "is equal to sps_pic_height_max_in_luma_samples, the value of "
+        "pps_conformance_window_flag shall be equal to 0");
+    goto error;
+  }
+
+  if (pps->conformance_window_flag) {
+    guint width, height;
+
+    width = pps->pic_width_in_luma_samples / sub_width_c;
+    height = pps->pic_height_in_luma_samples / sub_height_c;
+
+    READ_UE_MAX (&nr, pps->conf_win_left_offset, width);
+    READ_UE_MAX (&nr, pps->conf_win_right_offset, width);
+    READ_UE_MAX (&nr, pps->conf_win_top_offset, height);
+    READ_UE_MAX (&nr, pps->conf_win_bottom_offset, height);
+
+    if (sub_width_c * (pps->conf_win_left_offset +
+            pps->conf_win_right_offset) >= pps->pic_width_in_luma_samples
+        || sub_height_c * (pps->conf_win_top_offset +
+            pps->conf_win_bottom_offset) >= pps->pic_height_in_luma_samples) {
+      GST_WARNING ("Invalid pps conformance window: (%u, %u, %u, %u), "
+          "resolution is %ux%u, sub WxH is %ux%u.\n", pps->conf_win_left_offset,
+          pps->conf_win_right_offset, pps->conf_win_top_offset,
+          pps->conf_win_bottom_offset, pps->pic_width_in_luma_samples,
+          pps->pic_height_in_luma_samples, sub_width_c, sub_height_c);
+      goto error;
+    }
+  } else {
+    if (pps->pic_width_in_luma_samples ==
+        sps->pic_width_max_in_luma_samples &&
+        pps->pic_height_in_luma_samples ==
+        sps->pic_height_max_in_luma_samples) {
+      pps->conf_win_left_offset = sps->conf_win_left_offset;
+      pps->conf_win_right_offset = sps->conf_win_right_offset;
+      pps->conf_win_top_offset = sps->conf_win_top_offset;
+      pps->conf_win_bottom_offset = sps->conf_win_bottom_offset;
+    } else {
+      pps->conf_win_left_offset = 0;
+      pps->conf_win_right_offset = 0;
+      pps->conf_win_top_offset = 0;
+      pps->conf_win_bottom_offset = 0;
+    }
+  }
+
+  READ_UINT8 (&nr, pps->scaling_window_explicit_signalling_flag, 1);
+  if (pps->scaling_window_explicit_signalling_flag) {
+    if (!sps->ref_pic_resampling_enabled_flag) {
+      GST_WARNING ("When sps_ref_pic_resampling_enabled_flag is equal to 0, "
+          "the value of pps_scaling_window_explicit_signalling_flag "
+          "shall be equal to 0");
+      goto error;
+    }
+
+    READ_SE (&nr, pps->scaling_win_left_offset);
+    CHECK_ALLOWED (pps->scaling_win_left_offset * sub_width_c,
+        -pps->pic_width_in_luma_samples * 15, pps->pic_width_in_luma_samples);
+    READ_SE (&nr, pps->scaling_win_right_offset);
+    CHECK_ALLOWED (pps->scaling_win_right_offset * sub_width_c,
+        -pps->pic_width_in_luma_samples * 15, pps->pic_width_in_luma_samples);
+    READ_SE (&nr, pps->scaling_win_top_offset);
+    CHECK_ALLOWED (pps->scaling_win_top_offset * sub_height_c,
+        -pps->pic_height_in_luma_samples * 15, pps->pic_height_in_luma_samples);
+    READ_SE (&nr, pps->scaling_win_bottom_offset);
+    CHECK_ALLOWED (pps->scaling_win_bottom_offset * sub_height_c,
+        -pps->pic_height_in_luma_samples * 15, pps->pic_height_in_luma_samples);
+
+    CHECK_ALLOWED ((pps->scaling_win_left_offset +
+            pps->scaling_win_right_offset) * sub_width_c,
+        -pps->pic_width_in_luma_samples * 15, pps->pic_width_in_luma_samples);
+    CHECK_ALLOWED ((pps->scaling_win_top_offset +
+            pps->scaling_win_bottom_offset) * sub_height_c,
+        -pps->pic_height_in_luma_samples * 15, pps->pic_height_in_luma_samples);
+  } else {
+    pps->scaling_win_left_offset = pps->conf_win_left_offset;
+    pps->scaling_win_right_offset = pps->conf_win_right_offset;
+    pps->scaling_win_top_offset = pps->conf_win_top_offset;
+    pps->scaling_win_bottom_offset = pps->conf_win_bottom_offset;
+  }
+
+  READ_UINT8 (&nr, pps->output_flag_present_flag, 1);
+  READ_UINT8 (&nr, pps->no_pic_partition_flag, 1);
+
+  READ_UINT8 (&nr, pps->subpic_id_mapping_present_flag, 1);
+  if (pps->subpic_id_mapping_present_flag) {
+    if (!pps->no_pic_partition_flag) {
+      READ_UE (&nr, pps->num_subpics_minus1);
+      if (pps->num_subpics_minus1 != sps->num_subpics_minus1) {
+        GST_WARNING ("pps_num_subpics_minus1 shall be equal "
+            "to sps_num_subpics_minus1");
+        goto error;
+      }
+    } else {
+      pps->num_subpics_minus1 = 0;
+    }
+
+    READ_UE (&nr, pps->subpic_id_len_minus1);
+    if (pps->subpic_id_len_minus1 != sps->subpic_id_len_minus1) {
+      GST_WARNING ("pps_subpic_id_len_minus1 shall be equal "
+          "to sps_subpic_id_len_minus1");
+      goto error;
+    }
+
+    for (i = 0; i <= pps->num_subpics_minus1; i++)
+      READ_UINT16 (&nr, pps->subpic_id[i], pps->subpic_id_len_minus1 + 1);
+  }
+
+  pps->pic_width_in_ctbs_y =
+      (pps->pic_width_in_luma_samples + ctb_size_y - 1) / ctb_size_y;
+  pps->pic_height_in_ctbs_y =
+      (pps->pic_height_in_luma_samples + ctb_size_y - 1) / ctb_size_y;
+  pps->pic_size_in_ctbs_y =
+      pps->pic_width_in_ctbs_y * pps->pic_height_in_ctbs_y;
+
+  if (!pps->no_pic_partition_flag) {
+    if (!gst_h266_parser_parse_picture_partition (sps, pps, &nr))
+      goto error;
+  } else {
+    pps->single_slice_per_subpic_flag = 0;
+    pps->num_exp_tile_columns_minus1 = 0;
+    pps->tile_column_width_minus1[0] = pps->pic_width_in_ctbs_y - 1;
+    pps->num_exp_tile_rows_minus1 = 0;
+    pps->tile_row_height_minus1[0] = pps->pic_height_in_ctbs_y - 1;
+    pps->num_tile_columns = 1;
+    pps->num_tile_rows = 1;
+    pps->num_tiles_in_pic = 1;
+    pps->rect_slice_flag = 0;
+
+    pps->tile_col_bd_val[0] = 0;
+    for (i = 0; i < pps->num_tile_columns; i++) {
+      pps->tile_col_bd_val[i + 1] =
+          pps->tile_col_bd_val[i] + pps->tile_column_width_minus1[i] + 1;
+    }
+    pps->tile_row_bd_val[0] = 0;
+    for (i = 0; i < pps->num_tile_rows; i++) {
+      pps->tile_row_bd_val[i + 1] =
+          pps->tile_row_bd_val[i] + pps->tile_row_height_minus1[i] + 1;
+    }
+  }
+
+  READ_UINT8 (&nr, pps->cabac_init_present_flag, 1);
+
+  for (i = 0; i < 2; i++)
+    READ_UE_MAX (&nr, pps->num_ref_idx_default_active_minus1[i], 14);
+
+  READ_UINT8 (&nr, pps->rpl1_idx_present_flag, 1);
+  READ_UINT8 (&nr, pps->weighted_pred_flag, 1);
+  READ_UINT8 (&nr, pps->weighted_bipred_flag, 1);
+
+  READ_UINT8 (&nr, pps->ref_wraparound_enabled_flag, 1);
+  if (pps->ref_wraparound_enabled_flag)
+    READ_UE_MAX (&nr, pps->pic_width_minus_wraparound_offset,
+        (pps->pic_width_in_luma_samples / min_cb_size_y)
+        - (ctb_size_y / min_cb_size_y) - 2);
+
+  QpBdOffset = 6 * sps->bitdepth_minus8;
+  READ_SE_ALLOWED (&nr, pps->init_qp_minus26, -(26 + QpBdOffset), 37);
+  READ_UINT8 (&nr, pps->cu_qp_delta_enabled_flag, 1);
+  READ_UINT8 (&nr, pps->chroma_tool_offsets_present_flag, 1);
+  if (pps->chroma_tool_offsets_present_flag) {
+    READ_SE_ALLOWED (&nr, pps->cb_qp_offset, -12, 12);
+    READ_SE_ALLOWED (&nr, pps->cr_qp_offset, -12, 12);
+
+    READ_UINT8 (&nr, pps->joint_cbcr_qp_offset_present_flag, 1);
+    if (pps->joint_cbcr_qp_offset_present_flag) {
+      READ_SE_ALLOWED (&nr, pps->joint_cbcr_qp_offset_value, -12, 12);
+    } else {
+      pps->joint_cbcr_qp_offset_value = 0;
+    }
+
+    READ_UINT8 (&nr, pps->slice_chroma_qp_offsets_present_flag, 1);
+
+    READ_UINT8 (&nr, pps->cu_chroma_qp_offset_list_enabled_flag, 1);
+    if (pps->cu_chroma_qp_offset_list_enabled_flag) {
+      READ_UE_MAX (&nr, pps->chroma_qp_offset_list_len_minus1, 5);
+      for (i = 0; i <= pps->chroma_qp_offset_list_len_minus1; i++) {
+        READ_SE_ALLOWED (&nr, pps->cb_qp_offset_list[i], -12, 12);
+        READ_SE_ALLOWED (&nr, pps->cr_qp_offset_list[i], -12, 12);
+
+        if (pps->joint_cbcr_qp_offset_present_flag) {
+          READ_SE_ALLOWED (&nr, pps->joint_cbcr_qp_offset_list[i], -12, 12);
+        } else {
+          pps->joint_cbcr_qp_offset_list[i] = 0;
+        }
+      }
+    }
+  } else {
+    pps->cb_qp_offset = 0;
+    pps->cr_qp_offset = 0;
+    pps->joint_cbcr_qp_offset_present_flag = 0;
+    pps->joint_cbcr_qp_offset_value = 0;
+    pps->slice_chroma_qp_offsets_present_flag = 0;
+    pps->cu_chroma_qp_offset_list_enabled_flag = 0;
+  }
+
+  READ_UINT8 (&nr, pps->deblocking_filter_control_present_flag, 1);
+  if (pps->deblocking_filter_control_present_flag) {
+    READ_UINT8 (&nr, pps->deblocking_filter_override_enabled_flag, 1);
+    READ_UINT8 (&nr, pps->deblocking_filter_disabled_flag, 1);
+
+    if (!pps->no_pic_partition_flag &&
+        pps->deblocking_filter_override_enabled_flag) {
+      READ_UINT8 (&nr, pps->dbf_info_in_ph_flag, 1);
+    } else {
+      pps->dbf_info_in_ph_flag = 0;
+    }
+
+    if (!pps->deblocking_filter_disabled_flag) {
+      READ_SE_ALLOWED (&nr, pps->luma_beta_offset_div2, -12, 12);
+      READ_SE_ALLOWED (&nr, pps->luma_tc_offset_div2, -12, 12);
+
+      if (pps->chroma_tool_offsets_present_flag) {
+        READ_SE_ALLOWED (&nr, pps->cb_beta_offset_div2, -12, 12);
+        READ_SE_ALLOWED (&nr, pps->cb_tc_offset_div2, -12, 12);
+        READ_SE_ALLOWED (&nr, pps->cr_beta_offset_div2, -12, 12);
+        READ_SE_ALLOWED (&nr, pps->cr_tc_offset_div2, -12, 12);
+      } else {
+        pps->cb_beta_offset_div2 = 0;
+        pps->cb_tc_offset_div2 = 0;
+        pps->cr_beta_offset_div2 = pps->luma_beta_offset_div2;
+        pps->cr_tc_offset_div2 = pps->luma_tc_offset_div2;
+      }
+    } else {
+      pps->luma_beta_offset_div2 = 0;
+      pps->luma_tc_offset_div2 = 0;
+      pps->cb_beta_offset_div2 = 0;
+      pps->cb_tc_offset_div2 = 0;
+      pps->cr_beta_offset_div2 = pps->luma_beta_offset_div2;
+      pps->cr_tc_offset_div2 = pps->luma_tc_offset_div2;
+    }
+  } else {
+    pps->deblocking_filter_override_enabled_flag = 0;
+    pps->deblocking_filter_disabled_flag = 0;
+    pps->dbf_info_in_ph_flag = 0;
+    pps->luma_beta_offset_div2 = 0;
+    pps->luma_tc_offset_div2 = 0;
+    pps->cb_beta_offset_div2 = 0;
+    pps->cb_tc_offset_div2 = 0;
+    pps->cr_beta_offset_div2 = 0;
+    pps->cr_tc_offset_div2 = 0;
+  }
+
+  if (!pps->no_pic_partition_flag) {
+    READ_UINT8 (&nr, pps->rpl_info_in_ph_flag, 1);
+    READ_UINT8 (&nr, pps->sao_info_in_ph_flag, 1);
+    READ_UINT8 (&nr, pps->alf_info_in_ph_flag, 1);
+
+    if ((pps->weighted_pred_flag || pps->weighted_bipred_flag) &&
+        pps->rpl_info_in_ph_flag)
+      READ_UINT8 (&nr, pps->wp_info_in_ph_flag, 1);
+
+    READ_UINT8 (&nr, pps->qp_delta_info_in_ph_flag, 1);
+  }
+
+  READ_UINT8 (&nr, pps->picture_header_extension_present_flag, 1);
+  READ_UINT8 (&nr, pps->slice_header_extension_present_flag, 1);
+
+  READ_UINT8 (&nr, pps->extension_flag, 1);
+  if (pps->extension_flag) {
+    GST_WARNING ("extension_flag is not supported in current version pps.");
+    goto error;
+  }
+
+  /* calculate width and height */
+  pps->width = pps->pic_width_in_luma_samples;
+  pps->height = pps->pic_height_in_luma_samples;
+  if (pps->conformance_window_flag) {
+    pps->crop_rect_width = pps->width -
+        (pps->conf_win_left_offset + pps->conf_win_right_offset) * sub_width_c;
+    pps->crop_rect_height = pps->height -
+        (pps->conf_win_top_offset + pps->conf_win_bottom_offset) * sub_height_c;
+    pps->crop_rect_x = pps->conf_win_left_offset * sub_width_c;
+    pps->crop_rect_y = pps->conf_win_top_offset * sub_height_c;
+
+    GST_LOG ("crop_rectangle x=%u y=%u width=%u, height=%u", pps->crop_rect_x,
+        pps->crop_rect_y, pps->crop_rect_width, pps->crop_rect_height);
+  }
+
+  pps->valid = TRUE;
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Picture parameter set\"");
+  pps->valid = FALSE;
+  return GST_H266_PARSER_ERROR;
+}
+
+/**
+ * gst_h266_parser_parse_aps:
+ * @parser: a #GstH266Parser
+ * @nalu: The APS #GstH266NalUnit to parse
+ * @aps: The #GstH266APS to fill.
+ *
+ * Parses @data, and fills the @aps structure.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parser_parse_aps (GstH266Parser * parser,
+    GstH266NalUnit * nalu, GstH266APS * aps)
+{
+  GstH266ParserResult res = gst_h266_parse_aps (parser, nalu, aps);
+
+  if (res == GST_H266_PARSER_OK) {
+    GST_LOG ("adding adaptation parameter set with id: %d to array",
+        aps->aps_id);
+    parser->aps[aps->params_type][aps->aps_id] = *aps;
+    parser->last_aps[aps->params_type] =
+        &parser->aps[aps->params_type][aps->aps_id];
+  }
+
+  return res;
+}
+
+/**
+ * gst_h266_parse_aps:
+ * @parser: a #GstH266Parser
+ * @nalu: The APS #GstH266NalUnit to parse
+ * @aps: The #GstH266APS to fill.
+ *
+ * Parses @data, and fills the @aps structure.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parse_aps (GstH266Parser * parser, GstH266NalUnit * nalu,
+    GstH266APS * aps)
+{
+  NalReader nr;
+  guint8 params_type;
+
+  GST_LOG ("parsing APS");
+
+  nal_reader_init (&nr, nalu->data + nalu->offset + nalu->header_bytes,
+      nalu->size - nalu->header_bytes);
+
+  memset (aps, 0, sizeof (*aps));
+
+  READ_UINT8 (&nr, params_type, 3);
+  aps->params_type = params_type;
+  READ_UINT8 (&nr, aps->aps_id, 5);
+  CHECK_ALLOWED_MAX (aps->aps_id, GST_H266_MAX_APS_COUNT);
+  READ_UINT8 (&nr, aps->chroma_present_flag, 1);
+
+  switch (aps->params_type) {
+    case GST_H266_ALF_APS:
+      if (!gst_h266_parse_alf (&aps->alf, &nr, aps->chroma_present_flag))
+        goto error;
+      break;
+    case GST_H266_LMCS_APS:
+      if (!gst_h266_parse_lmcs (&aps->lmcs, &nr, aps->chroma_present_flag))
+        goto error;
+      break;
+    case GST_H266_SCALING_APS:
+      if (!gst_h266_parse_scaling_list (&aps->sl, &nr,
+              aps->chroma_present_flag))
+        goto error;
+      break;
+    default:
+      GST_WARNING ("unknown APS params_type %d", aps->params_type);
+      goto error;
+      break;
+  }
+
+  READ_UINT8 (&nr, aps->extension_flag, 1);
+  if (aps->extension_flag) {
+    READ_UINT8 (&nr, aps->extension_data_flag, 1);
+    if (aps->extension_data_flag) {
+      GST_WARNING ("extension_data_flag shall be equal to 0 "
+          "in current version aps.");
+      goto error;
+    }
+  }
+
+  aps->valid = TRUE;
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Adaptation parameter set\"");
+  aps->valid = FALSE;
+  return GST_H266_PARSER_ERROR;
+}
+
+/**
+ * gst_h266_parser_parse_aud:
+ * @parser: a #GstH266Parser
+ * @nalu: The AUD #GstH266NalUnit to parse
+ * @aud: The #GstH266AUD to fill.
+ *
+ * Parses @data, and fills the @aud structure.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parser_parse_aud (GstH266Parser * parser,
+    GstH266NalUnit * nalu, GstH266AUD * aud)
+{
+  NalReader nr;
+
+  GST_LOG ("parsing Access Unit Delimiter");
+
+  nal_reader_init (&nr, nalu->data + nalu->offset + nalu->header_bytes,
+      nalu->size - nalu->header_bytes);
+
+  memset (aud, 0, sizeof (*aud));
+
+  READ_UINT8 (&nr, aud->irap_or_gdr_flag, 1);
+  READ_UINT8 (&nr, aud->pic_type, 3);
+  CHECK_ALLOWED_MAX (aud->pic_type, 2);
+
+  /* Skip the byte alignment bits */
+  if (!nal_reader_skip (&nr, 1))
+    goto error;
+
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Access Unit Delimiter\"");
+  return GST_H266_PARSER_ERROR;
+}
+
+/**
+ * gst_h266_parser_parse_opi:
+ * @parser: a #GstH266Parser
+ * @nalu: The OPI #GstH266NalUnit to parse
+ * @opi: The #GstH266OPI to fill.
+ *
+ * Parses @data, and fills the @opi structure.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parser_parse_opi (GstH266Parser * parser,
+    GstH266NalUnit * nalu, GstH266OPI * opi)
+{
+  NalReader nr;
+
+  GST_LOG ("parsing Operating Point Information");
+
+  nal_reader_init (&nr, nalu->data + nalu->offset + nalu->header_bytes,
+      nalu->size - nalu->header_bytes);
+
+  memset (opi, 0, sizeof (*opi));
+
+  READ_UINT8 (&nr, opi->ols_info_present_flag, 1);
+  READ_UINT8 (&nr, opi->htid_info_present_flag, 1);
+
+  if (opi->ols_info_present_flag)
+    READ_UE (&nr, opi->ols_idx);
+
+  if (opi->htid_info_present_flag)
+    READ_UINT8 (&nr, opi->htid_plus1, 3);
+
+  READ_UINT8 (&nr, opi->extension_flag, 1);
+  if (opi->extension_flag) {
+    GST_WARNING ("extension_flag is not supported in current version OPI.");
+    goto error;
+  }
+
+  /* Skip the byte alignment bits */
+  if (!nal_reader_skip (&nr, 1))
+    goto error;
+
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Operating Point Information\"");
+  return GST_H266_PARSER_ERROR;
+}
+
+/**
+ * gst_h266_parser_parse_dci:
+ * @parser: a #GstH266Parser
+ * @nalu: The DCI #GstH266NalUnit to parse
+ * @dci: The #GstH266DCI to fill.
+ *
+ * Parses @data, and fills the @dci structure.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parser_parse_dci (GstH266Parser * parser,
+    GstH266NalUnit * nalu, GstH266DCI * dci)
+{
+  NalReader nr;
+  guint8 dci_reserved_zero_4bits;
+  guint i;
+
+  GST_LOG ("parsing Decoding Capability Information");
+
+  nal_reader_init (&nr, nalu->data + nalu->offset + nalu->header_bytes,
+      nalu->size - nalu->header_bytes);
+
+  memset (dci, 0, sizeof (*dci));
+
+  READ_UINT8 (&nr, dci_reserved_zero_4bits, 4);
+  READ_UINT8 (&nr, dci->num_ptls_minus1, 4);
+  CHECK_ALLOWED_MAX (dci->num_ptls_minus1, 15);
+  for (i = 0; i <= dci->num_ptls_minus1; i++) {
+    if (!gst_h266_parse_profile_tier_level (&dci->profile_tier_level[i],
+            &nr, 1, 0))
+      goto error;
+  }
+
+  READ_UINT8 (&nr, dci->extension_flag, 1);
+  if (dci->extension_flag) {
+    GST_WARNING ("extension_flag is not supported in current version DCI.");
+    goto error;
+  }
+
+  /* Skip the byte alignment bits */
+  if (!nal_reader_skip (&nr, 1))
+    goto error;
+
+  return GST_H266_PARSER_OK;
+
+error:
+  GST_WARNING ("error parsing \"Decoding Capability Information\"");
+  return GST_H266_PARSER_ERROR;
+}
+
+static gboolean
+gst_h266_parse_pred_weight_table (GstH266PredWeightTable * pwt, NalReader * nr,
+    const GstH266SPS * sps, const GstH266PPS * pps,
+    const GstH266RefPicLists * ref_lists, const guint8 num_ref_idx_active[2])
+{
+  gint i, j;
+
+  GST_LOG ("parsing Pred Weight Table");
+
+  memset (pwt, 0, sizeof (*pwt));
+
+  READ_UE_MAX (nr, pwt->luma_log2_weight_denom, 7);
+
+  if (sps->chroma_format_idc != 0) {
+    gint luma_log2_weight_denom = pwt->luma_log2_weight_denom;
+
+    READ_SE_ALLOWED (nr, pwt->delta_chroma_log2_weight_denom,
+        -luma_log2_weight_denom, 7 - luma_log2_weight_denom);
+  } else {
+    pwt->delta_chroma_log2_weight_denom = 0;
+  }
+
+  if (pps->wp_info_in_ph_flag) {
+    READ_UE_MAX (nr, pwt->num_l0_weights, MIN (15,
+            ref_lists->rpl_ref_list[0].num_ref_entries));
+  } else {
+    pwt->num_l0_weights = num_ref_idx_active[0];
+  }
+
+  for (i = 0; i < pwt->num_l0_weights; i++)
+    READ_UINT8 (nr, pwt->luma_weight_l0_flag[i], 1);
+
+  if (sps->chroma_format_idc != 0) {
+    for (i = 0; i < pwt->num_l0_weights; i++)
+      READ_UINT8 (nr, pwt->chroma_weight_l0_flag[i], 1);
+  }
+
+  for (i = 0; i < pwt->num_l0_weights; i++) {
+    if (pwt->luma_weight_l0_flag[i]) {
+      READ_SE_ALLOWED (nr, pwt->delta_luma_weight_l0[i], -128, 127);
+      READ_SE_ALLOWED (nr, pwt->luma_offset_l0[i], -128, 127);
+    } else {
+      pwt->delta_luma_weight_l0[i] = 0;
+      pwt->luma_offset_l0[i] = 0;
+    }
+
+    if (pwt->chroma_weight_l0_flag[i]) {
+      for (j = 0; j < 2; j++) {
+        READ_SE_ALLOWED (nr, pwt->delta_chroma_weight_l0[i][j], -128, 127);
+        READ_SE_ALLOWED (nr, pwt->delta_chroma_offset_l0[i][j], -4 * 128,
+            4 * 127);
+      }
+    }
+  }
+
+  if (pps->weighted_bipred_flag && pps->wp_info_in_ph_flag &&
+      ref_lists->rpl_ref_list[1].num_ref_entries > 0) {
+  }
+
+  if (!pps->weighted_bipred_flag
+      || ref_lists->rpl_ref_list[1].num_ref_entries == 0) {
+    pwt->num_l1_weights = 0;
+  } else if (pps->wp_info_in_ph_flag) {
+    READ_UE_MAX (nr, pwt->num_l1_weights, MIN (15,
+            ref_lists->rpl_ref_list[1].num_ref_entries));
+  } else {
+    pwt->num_l1_weights = num_ref_idx_active[1];
+  }
+
+  for (i = 0; i < pwt->num_l1_weights; i++)
+    READ_UINT8 (nr, pwt->luma_weight_l1_flag[i], 1);
+
+  if (sps->chroma_format_idc != 0) {
+    for (i = 0; i < pwt->num_l1_weights; i++)
+      READ_UINT8 (nr, pwt->chroma_weight_l1_flag[i], 1);
+  }
+
+  for (i = 0; i < pwt->num_l1_weights; i++) {
+    if (pwt->luma_weight_l1_flag[i]) {
+      READ_SE_ALLOWED (nr, pwt->delta_luma_weight_l1[i], -128, 127);
+      READ_SE_ALLOWED (nr, pwt->luma_offset_l1[i], -128, 127);
+    } else {
+      pwt->delta_luma_weight_l1[i] = 0;
+      pwt->luma_offset_l1[i] = 0;
+    }
+
+    if (pwt->chroma_weight_l1_flag[i]) {
+      for (j = 0; j < 2; j++) {
+        READ_SE_ALLOWED (nr, pwt->delta_chroma_weight_l1[i][j], -128, 127);
+        READ_SE_ALLOWED (nr, pwt->delta_chroma_offset_l1[i][j], -4 * 128,
+            4 * 127);
+      }
+    }
+  }
+
+  return TRUE;
+
+error:
+  GST_WARNING ("error parsing \"Pred Weight Table\"");
+  return FALSE;
+}
+
+static void
+gst_h266_parse_inherit_deblock_param_from_pps (GstH266PicHdr * ph)
+{
+  ph->luma_beta_offset_div2 = ph->pps->luma_beta_offset_div2;
+  ph->luma_tc_offset_div2 = ph->pps->luma_tc_offset_div2;
+  ph->cb_beta_offset_div2 = ph->pps->cb_beta_offset_div2;
+  ph->cb_tc_offset_div2 = ph->pps->cb_tc_offset_div2;
+  ph->cr_beta_offset_div2 = ph->pps->cr_beta_offset_div2;
+  ph->cr_tc_offset_div2 = ph->pps->cr_tc_offset_div2;
+}
+
+static GstH266ParserResult
+gst_h266_parse_picture_hdr_structure (GstH266PicHdr * ph,
+    NalReader * nr, GstH266Parser * parser)
+{
+  const GstH266SPS *sps;
+  guint ctb_log2_size_y, min_cb_log2_size_y, i;
+  GstH266ParserResult ret = GST_H266_PARSER_OK;
+
+  GST_LOG ("parsing Picture Header Structure");
+
+  READ_UINT8 (nr, ph->gdr_or_irap_pic_flag, 1);
+  READ_UINT8 (nr, ph->non_ref_pic_flag, 1);
+
+  if (ph->gdr_or_irap_pic_flag) {
+    READ_UINT8 (nr, ph->gdr_pic_flag, 1);
+  } else {
+    ph->gdr_pic_flag = 0;
+  }
+
+  READ_UINT8 (nr, ph->inter_slice_allowed_flag, 1);
+  if (ph->inter_slice_allowed_flag) {
+    READ_UINT8 (nr, ph->intra_slice_allowed_flag, 1);
+  } else {
+    ph->intra_slice_allowed_flag = 1;
+  }
+
+  READ_UE_MAX (nr, ph->pps_id, GST_H266_MAX_PPS_COUNT - 1);
+  ph->pps = gst_h266_parser_get_pps (parser, ph->pps_id);
+  if (!ph->pps) {
+    GST_WARNING ("PPS id %d not available.", ph->pps_id);
+    ret = GST_H266_PARSER_BROKEN_LINK;
+    goto error_with_ret;
+  }
+  sps = gst_h266_parser_get_sps (parser, ph->pps->sps_id);
+  if (!sps) {
+    GST_WARNING ("SPS id %d not available.", ph->pps->sps_id);
+    ret = GST_H266_PARSER_BROKEN_LINK;
+    goto error_with_ret;
+  }
+
+  READ_UINT16 (nr, ph->pic_order_cnt_lsb,
+      sps->log2_max_pic_order_cnt_lsb_minus4 + 4);
+
+  if (ph->gdr_pic_flag)
+    READ_UE_MAX (nr, ph->recovery_poc_cnt,
+        1 << (sps->log2_max_pic_order_cnt_lsb_minus4 + 4));
+
+  if ((!ph->gdr_or_irap_pic_flag || ph->gdr_pic_flag) &&
+      (!ph->gdr_pic_flag || ph->recovery_poc_cnt != 0)) {
+    const GstH266GeneralConstraintsInfo *general_constraints_info =
+        &sps->profile_tier_level.general_constraints_info;
+
+    if (sps->profile_tier_level.profile_idc & GST_H266_PROFILE_INTRA) {
+      GST_WARNING ("Invalid non-irap pictures or gdr "
+          "pictures with ph_recovery_poc_cnt!=0 for Intra profile");
+      goto error;
+    }
+
+    if (general_constraints_info->all_rap_pictures_constraint_flag) {
+      GST_WARNING ("gci_all_rap_pictures_flag equal to 1 specifies that "
+          "all pictures in OlsInScope are IRAP pictures or GDR pictures "
+          "with ph_recovery_poc_cnt equal to 0");
+      goto error;
+    }
+  }
+
+  for (i = 0; i < sps->num_extra_ph_bytes * 8; i++) {
+    /* extra bits are ignored now */
+    if (sps->extra_ph_bit_present_flag[i])
+      READ_UINT8 (nr, ph->extra_bit[i], 1);
+  }
+
+  if (sps->poc_msb_cycle_flag) {
+    READ_UINT8 (nr, ph->poc_msb_cycle_present_flag, 1);
+    if (ph->poc_msb_cycle_present_flag)
+      READ_UINT8 (nr, ph->poc_msb_cycle_val, sps->poc_msb_cycle_len_minus1 + 1);
+  }
+
+  if (sps->alf_enabled_flag && ph->pps->alf_info_in_ph_flag) {
+    READ_UINT8 (nr, ph->alf_enabled_flag, 1);
+    if (ph->alf_enabled_flag) {
+      READ_UINT8 (nr, ph->num_alf_aps_ids_luma, 3);
+      for (i = 0; i < ph->num_alf_aps_ids_luma; i++)
+        READ_UINT8 (nr, ph->alf_aps_id_luma[i], 3);
+
+      if (sps->chroma_format_idc != 0) {
+        READ_UINT8 (nr, ph->alf_cb_enabled_flag, 1);
+        READ_UINT8 (nr, ph->alf_cr_enabled_flag, 1);
+      } else {
+        ph->alf_cb_enabled_flag = 0;
+        ph->alf_cr_enabled_flag = 0;
+      }
+
+      if (ph->alf_cb_enabled_flag || ph->alf_cr_enabled_flag)
+        READ_UINT8 (nr, ph->alf_aps_id_chroma, 3);
+
+      if (sps->ccalf_enabled_flag) {
+        READ_UINT8 (nr, ph->alf_cc_cb_enabled_flag, 1);
+        if (ph->alf_cc_cb_enabled_flag)
+          READ_UINT8 (nr, ph->alf_cc_cb_aps_id, 3);
+
+        READ_UINT8 (nr, ph->alf_cc_cr_enabled_flag, 1);
+        if (ph->alf_cc_cr_enabled_flag)
+          READ_UINT8 (nr, ph->alf_cc_cr_aps_id, 3);
+      }
+    }
+  } else {
+    ph->alf_enabled_flag = 0;
+  }
+
+  if (sps->lmcs_enabled_flag) {
+    READ_UINT8 (nr, ph->lmcs_enabled_flag, 1);
+    if (ph->lmcs_enabled_flag) {
+      READ_UINT8 (nr, ph->lmcs_aps_id, 2);
+
+      if (sps->chroma_format_idc != 0) {
+        READ_UINT8 (nr, ph->chroma_residual_scale_flag, 1);
+      } else {
+        ph->chroma_residual_scale_flag = 0;
+      }
+    }
+  } else {
+    ph->lmcs_enabled_flag = 0;
+    ph->chroma_residual_scale_flag = 0;
+  }
+
+  if (sps->explicit_scaling_list_enabled_flag) {
+    READ_UINT8 (nr, ph->explicit_scaling_list_enabled_flag, 1);
+    if (ph->explicit_scaling_list_enabled_flag)
+      READ_UINT8 (nr, ph->scaling_list_aps_id, 3);
+  } else {
+    ph->explicit_scaling_list_enabled_flag = 0;
+  }
+
+  if (sps->virtual_boundaries_enabled_flag &&
+      !sps->virtual_boundaries_present_flag) {
+    READ_UINT8 (nr, ph->virtual_boundaries_present_flag, 1);
+    if (ph->virtual_boundaries_present_flag) {
+      READ_UE_MAX (nr, ph->num_ver_virtual_boundaries,
+          ((ph->pps->pic_width_in_luma_samples <= 8) ? 0 : 3));
+      for (i = 0; i < ph->num_ver_virtual_boundaries; i++)
+        READ_UE_MAX (nr, ph->virtual_boundary_pos_x_minus1[i],
+            (ph->pps->pic_width_in_luma_samples + 7) / 8 - 2);
+
+      READ_UE_MAX (nr, ph->num_hor_virtual_boundaries,
+          ((ph->pps->pic_height_in_luma_samples <= 8) ? 0 : 3));
+      for (i = 0; i < ph->num_hor_virtual_boundaries; i++) {
+        READ_UE_MAX (nr, ph->virtual_boundary_pos_y_minus1[i],
+            (ph->pps->pic_height_in_luma_samples + 7) / 8 - 2);
+      }
+    } else {
+      ph->num_ver_virtual_boundaries = 0;
+      ph->num_hor_virtual_boundaries = 0;
+    }
+  }
+
+  if (ph->pps->output_flag_present_flag && !ph->non_ref_pic_flag) {
+    READ_UINT8 (nr, ph->pic_output_flag, 1);
+  } else {
+    ph->pic_output_flag = 1;
+  }
+
+  if (ph->pps->rpl_info_in_ph_flag) {
+    if (!gst_h266_ref_pic_lists (&ph->ref_pic_lists, nr, sps, ph->pps))
+      goto error;
+  }
+
+  if (sps->partition_constraints_override_enabled_flag) {
+    READ_UINT8 (nr, ph->partition_constraints_override_flag, 1);
+  } else {
+    ph->partition_constraints_override_flag = 0;
+  }
+
+  ctb_log2_size_y = sps->log2_ctu_size_minus5 + 5;
+  min_cb_log2_size_y = sps->log2_min_luma_coding_block_size_minus2 + 2;
+
+  ph->log2_diff_min_qt_min_cb_intra_slice_luma =
+      sps->log2_diff_min_qt_min_cb_intra_slice_luma;
+  ph->max_mtt_hierarchy_depth_intra_slice_luma =
+      sps->max_mtt_hierarchy_depth_intra_slice_luma;
+  ph->log2_diff_max_bt_min_qt_intra_slice_luma =
+      sps->log2_diff_max_bt_min_qt_intra_slice_luma;
+  ph->log2_diff_max_tt_min_qt_intra_slice_luma =
+      sps->log2_diff_max_tt_min_qt_intra_slice_luma;
+  ph->log2_diff_min_qt_min_cb_intra_slice_chroma =
+      sps->log2_diff_min_qt_min_cb_intra_slice_chroma;
+  ph->max_mtt_hierarchy_depth_intra_slice_chroma =
+      sps->max_mtt_hierarchy_depth_intra_slice_chroma;
+  ph->log2_diff_max_bt_min_qt_intra_slice_chroma =
+      sps->log2_diff_max_bt_min_qt_intra_slice_chroma;
+  ph->log2_diff_max_tt_min_qt_intra_slice_chroma =
+      sps->log2_diff_max_tt_min_qt_intra_slice_chroma;
+
+  ph->log2_diff_min_qt_min_cb_inter_slice =
+      sps->log2_diff_min_qt_min_cb_inter_slice;
+  ph->max_mtt_hierarchy_depth_inter_slice =
+      sps->max_mtt_hierarchy_depth_inter_slice;
+  ph->log2_diff_max_bt_min_qt_inter_slice =
+      sps->log2_diff_max_bt_min_qt_inter_slice;
+  ph->log2_diff_max_tt_min_qt_inter_slice =
+      sps->log2_diff_max_tt_min_qt_inter_slice;
+
+  ph->collocated_from_l0_flag = 1;
+
+  if (ph->intra_slice_allowed_flag) {
+    guint min_qt_log2_size_intra_y;
+
+    if (ph->partition_constraints_override_flag) {
+      READ_UE_MAX (nr, ph->log2_diff_min_qt_min_cb_intra_slice_luma,
+          MIN (6, ctb_log2_size_y) - min_cb_log2_size_y);
+      min_qt_log2_size_intra_y =
+          ph->log2_diff_min_qt_min_cb_intra_slice_luma + min_cb_log2_size_y;
+
+      READ_UE_MAX (nr, ph->max_mtt_hierarchy_depth_intra_slice_luma,
+          2 * (ctb_log2_size_y - min_cb_log2_size_y));
+
+      if (ph->max_mtt_hierarchy_depth_intra_slice_luma != 0) {
+        READ_UE_MAX (nr, ph->log2_diff_max_bt_min_qt_intra_slice_luma,
+            ctb_log2_size_y - min_qt_log2_size_intra_y);
+        READ_UE_MAX (nr, ph->log2_diff_max_tt_min_qt_intra_slice_luma,
+            MIN (6, ctb_log2_size_y) - min_qt_log2_size_intra_y);
+      } else {
+        ph->log2_diff_max_bt_min_qt_intra_slice_luma =
+            sps->log2_diff_max_bt_min_qt_intra_slice_luma;
+        ph->log2_diff_max_tt_min_qt_intra_slice_luma =
+            sps->log2_diff_max_tt_min_qt_intra_slice_luma;
+      }
+
+      if (sps->qtbtt_dual_tree_intra_flag) {
+        READ_UE_MAX (nr, ph->log2_diff_min_qt_min_cb_intra_slice_chroma,
+            MIN (6, ctb_log2_size_y) - min_cb_log2_size_y);
+        READ_UE_MAX (nr, ph->max_mtt_hierarchy_depth_intra_slice_chroma,
+            2 * (ctb_log2_size_y - min_cb_log2_size_y));
+
+        if (sps->max_mtt_hierarchy_depth_intra_slice_chroma != 0) {
+          gint32 min_qt_log2_size_intra_c =
+              sps->log2_diff_min_qt_min_cb_intra_slice_chroma +
+              min_cb_log2_size_y;
+
+          READ_UE_MAX (nr, ph->log2_diff_max_bt_min_qt_intra_slice_chroma,
+              MIN (6, ctb_log2_size_y) - min_qt_log2_size_intra_c);
+          READ_UE_MAX (nr, ph->log2_diff_max_tt_min_qt_intra_slice_chroma,
+              MIN (6, ctb_log2_size_y) - min_qt_log2_size_intra_c);
+        } else {
+          ph->log2_diff_max_bt_min_qt_intra_slice_chroma =
+              sps->log2_diff_max_bt_min_qt_intra_slice_chroma;
+          ph->log2_diff_max_tt_min_qt_intra_slice_chroma =
+              sps->log2_diff_max_tt_min_qt_intra_slice_chroma;
+        }
+      }
+    }
+
+    min_qt_log2_size_intra_y =
+        ph->log2_diff_min_qt_min_cb_intra_slice_luma + ctb_log2_size_y;
+
+    if (ph->pps->cu_qp_delta_enabled_flag) {
+      READ_UE_MAX (nr, ph->cu_qp_delta_subdiv_intra_slice,
+          2 * (ctb_log2_size_y - min_qt_log2_size_intra_y +
+              ph->max_mtt_hierarchy_depth_intra_slice_luma));
+    } else {
+      ph->cu_qp_delta_subdiv_intra_slice = 0;
+    }
+
+    if (ph->pps->cu_chroma_qp_offset_list_enabled_flag) {
+      READ_UE_MAX (nr, ph->cu_chroma_qp_offset_subdiv_intra_slice,
+          2 * (ctb_log2_size_y - min_qt_log2_size_intra_y +
+              ph->max_mtt_hierarchy_depth_intra_slice_luma));
+    } else {
+      ph->cu_chroma_qp_offset_subdiv_intra_slice = 0;
+    }
+  }
+
+  if (ph->inter_slice_allowed_flag) {
+    guint min_qt_log2_size_inter_y;
+
+    if (ph->partition_constraints_override_flag) {
+      READ_UE_MAX (nr, ph->log2_diff_min_qt_min_cb_inter_slice,
+          MIN (6, ctb_log2_size_y) - min_cb_log2_size_y);
+      min_qt_log2_size_inter_y =
+          ph->log2_diff_min_qt_min_cb_inter_slice + min_cb_log2_size_y;
+
+      READ_UE_MAX (nr, ph->max_mtt_hierarchy_depth_inter_slice,
+          2 * (ctb_log2_size_y - min_cb_log2_size_y));
+      if (ph->max_mtt_hierarchy_depth_inter_slice != 0) {
+        READ_UE_MAX (nr, ph->log2_diff_max_bt_min_qt_inter_slice,
+            ctb_log2_size_y - min_qt_log2_size_inter_y);
+        READ_UE_MAX (nr, ph->log2_diff_max_tt_min_qt_inter_slice,
+            MIN (6, ctb_log2_size_y) - min_qt_log2_size_inter_y);
+      }
+    }
+
+    min_qt_log2_size_inter_y =
+        ph->log2_diff_min_qt_min_cb_inter_slice + min_cb_log2_size_y;
+
+    if (ph->pps->cu_qp_delta_enabled_flag) {
+      READ_UE_MAX (nr, ph->cu_qp_delta_subdiv_inter_slice,
+          2 * (ctb_log2_size_y - min_qt_log2_size_inter_y +
+              ph->max_mtt_hierarchy_depth_inter_slice));
+    } else {
+      ph->cu_qp_delta_subdiv_inter_slice = 0;
+    }
+
+    if (ph->pps->cu_chroma_qp_offset_list_enabled_flag) {
+      READ_UE_MAX (nr, ph->cu_chroma_qp_offset_subdiv_inter_slice,
+          2 * (ctb_log2_size_y - min_qt_log2_size_inter_y +
+              ph->max_mtt_hierarchy_depth_inter_slice));
+    } else {
+      ph->cu_chroma_qp_offset_subdiv_inter_slice = 0;
+    }
+
+    if (sps->temporal_mvp_enabled_flag) {
+      READ_UINT8 (nr, ph->temporal_mvp_enabled_flag, 1);
+      if (ph->temporal_mvp_enabled_flag && ph->pps->rpl_info_in_ph_flag) {
+        if (ph->ref_pic_lists.rpl_ref_list[1].num_ref_entries > 0) {
+          READ_UINT8 (nr, ph->collocated_from_l0_flag, 1);
+        } else {
+          ph->collocated_from_l0_flag = 1;
+        }
+
+        if ((ph->collocated_from_l0_flag &&
+                ph->ref_pic_lists.rpl_ref_list[0].num_ref_entries > 1) ||
+            (!ph->collocated_from_l0_flag &&
+                ph->ref_pic_lists.rpl_ref_list[1].num_ref_entries > 1)) {
+          guint idx = ph->collocated_from_l0_flag ? 0 : 1;
+
+          READ_UE_MAX (nr, ph->collocated_ref_idx,
+              ph->ref_pic_lists.rpl_ref_list[idx].num_ref_entries - 1);
+        } else {
+          ph->collocated_ref_idx = 0;
+        }
+      }
+    }
+
+    if (sps->mmvd_fullpel_only_enabled_flag) {
+      READ_UINT8 (nr, ph->mmvd_fullpel_only_flag, 1);
+    } else {
+      ph->mmvd_fullpel_only_flag = 0;
+    }
+
+    if (!ph->pps->rpl_info_in_ph_flag ||
+        ph->ref_pic_lists.rpl_ref_list[1].num_ref_entries > 0) {
+      READ_UINT8 (nr, ph->mvd_l1_zero_flag, 1);
+
+      if (sps->bdof_control_present_in_ph_flag) {
+        READ_UINT8 (nr, ph->bdof_disabled_flag, 1);
+      } else {
+        ph->bdof_disabled_flag = !sps->bdof_enabled_flag;
+      }
+
+      if (sps->dmvr_control_present_in_ph_flag) {
+        READ_UINT8 (nr, ph->dmvr_disabled_flag, 1);
+      } else {
+        ph->dmvr_disabled_flag = !sps->dmvr_enabled_flag;
+      }
+    } else {
+      ph->mvd_l1_zero_flag = 1;
+    }
+
+    if (sps->prof_control_present_in_ph_flag) {
+      READ_UINT8 (nr, ph->prof_disabled_flag, 1);
+    } else {
+      ph->prof_disabled_flag = !sps->affine_prof_enabled_flag;
+    }
+
+    if ((ph->pps->weighted_pred_flag ||
+            ph->pps->weighted_bipred_flag) && ph->pps->wp_info_in_ph_flag) {
+      guint8 num_ref_idx_active[2];
+
+      num_ref_idx_active[0] = ph->ref_pic_lists.rpl_ref_list[0].num_ref_entries;
+      num_ref_idx_active[1] = ph->ref_pic_lists.rpl_ref_list[1].num_ref_entries;
+
+      if (!gst_h266_parse_pred_weight_table (&ph->pred_weight_table,
+              nr, sps, ph->pps, &ph->ref_pic_lists, num_ref_idx_active))
+        goto error;
+    }
+  }
+
+  if (ph->pps->qp_delta_info_in_ph_flag) {
+    /* SliceQpy = 26 + pps_init_qp_minus26 + ph_qp_delta,
+       The value of SliceQp Y shall be in the range of
+       -QpBdOffset to +63, inclusive */
+    gint qp_bd_offset = 6 * sps->bitdepth_minus8;
+    READ_SE_ALLOWED (nr, ph->qp_delta,
+        -qp_bd_offset - (26 + ph->pps->init_qp_minus26),
+        63 - (26 + ph->pps->init_qp_minus26));
+  }
+
+  if (sps->joint_cbcr_enabled_flag) {
+    READ_UINT8 (nr, ph->joint_cbcr_sign_flag, 1);
+  } else {
+    ph->joint_cbcr_sign_flag = 0;
+  }
+
+  if (sps->sao_enabled_flag && ph->pps->sao_info_in_ph_flag) {
+    READ_UINT8 (nr, ph->sao_luma_enabled_flag, 1);
+    if (sps->chroma_format_idc != 0) {
+      READ_UINT8 (nr, ph->sao_chroma_enabled_flag, 1);
+    } else
+      ph->sao_chroma_enabled_flag = 0;
+  } else {
+    ph->sao_luma_enabled_flag = 0;
+    ph->sao_chroma_enabled_flag = 0;
+  }
+
+  if (ph->pps->dbf_info_in_ph_flag) {
+    READ_UINT8 (nr, ph->deblocking_params_present_flag, 1);
+    if (ph->deblocking_params_present_flag) {
+      if (!ph->pps->deblocking_filter_disabled_flag) {
+        READ_UINT8 (nr, ph->deblocking_filter_disabled_flag, 1);
+      } else {
+        ph->deblocking_filter_disabled_flag = 0;
+      }
+
+      if (!ph->deblocking_filter_disabled_flag) {
+        READ_SE_ALLOWED (nr, ph->luma_beta_offset_div2, -12, 12);
+        READ_SE_ALLOWED (nr, ph->luma_tc_offset_div2, -12, 12);
+        if (ph->pps->chroma_tool_offsets_present_flag) {
+          READ_SE_ALLOWED (nr, ph->cb_beta_offset_div2, -12, 12);
+          READ_SE_ALLOWED (nr, ph->cb_tc_offset_div2, -12, 12);
+          READ_SE_ALLOWED (nr, ph->cr_beta_offset_div2, -12, 12);
+          READ_SE_ALLOWED (nr, ph->cr_tc_offset_div2, -12, 12);
+        } else {
+          ph->cb_beta_offset_div2 = ph->luma_beta_offset_div2;
+          ph->cb_tc_offset_div2 = ph->luma_tc_offset_div2;
+          ph->cr_beta_offset_div2 = ph->luma_beta_offset_div2;
+          ph->cr_tc_offset_div2 = ph->luma_tc_offset_div2;
+        }
+      } else {
+        if (ph->pps->chroma_tool_offsets_present_flag) {
+          gst_h266_parse_inherit_deblock_param_from_pps (ph);
+        } else {
+          ph->luma_beta_offset_div2 = ph->pps->luma_beta_offset_div2;
+          ph->luma_tc_offset_div2 = ph->pps->luma_tc_offset_div2;
+          ph->cb_beta_offset_div2 = ph->luma_beta_offset_div2;
+          ph->cb_tc_offset_div2 = ph->luma_tc_offset_div2;
+          ph->cr_beta_offset_div2 = ph->luma_beta_offset_div2;
+          ph->cr_tc_offset_div2 = ph->luma_tc_offset_div2;
+        }
+      }
+    } else {
+      ph->deblocking_filter_disabled_flag =
+          ph->pps->deblocking_filter_disabled_flag;
+      gst_h266_parse_inherit_deblock_param_from_pps (ph);
+    }
+  } else {
+    ph->deblocking_filter_disabled_flag =
+        ph->pps->deblocking_filter_disabled_flag;
+    gst_h266_parse_inherit_deblock_param_from_pps (ph);
+  }
+
+  if (ph->pps->picture_header_extension_present_flag) {
+    READ_UE_MAX (nr, ph->extension_length, 256);
+    for (i = 0; i < ph->extension_length; i++)
+      READ_UINT8 (nr, ph->extension_data_byte[i], 8);
+  }
+
+  return ret;
+
+error:
+  ret = GST_H266_PARSER_ERROR;
+error_with_ret:
+  GST_WARNING ("error parsing \"Picture Header\"");
+  return FALSE;
+}
+
+/**
+ * gst_h266_parser_parse_picture_hdr:
+ * @parser: a #GstH266Parser
+ * @nalu: The picture header #GstH266NalUnit to parse
+ * @ph: The #GstH266PicHdr to fill.
+ *
+ * Parses @data, and fills the @ph structure.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parser_parse_picture_hdr (GstH266Parser * parser,
+    GstH266NalUnit * nalu, GstH266PicHdr * ph)
+{
+  NalReader nr;
+  GstH266ParserResult ret;
+
+  GST_LOG ("parsing Picture Header");
+
+  nal_reader_init (&nr, nalu->data + nalu->offset + nalu->header_bytes,
+      nalu->size - nalu->header_bytes);
+
+  memset (ph, 0, sizeof (*ph));
+
+  ret = gst_h266_parse_picture_hdr_structure (ph, &nr, parser);
+  if (ret != GST_H266_PARSER_OK)
+    goto error;
+
+  ph->valid = TRUE;
+  parser->ph = *ph;
+
+  return ret;
+
+error:
+  GST_WARNING ("error parsing \"Picture Header\"");
+  return ret;
+}
+
+static gboolean
+gst_h266_parser_parse_slice_address (GstH266Parser * parser, NalReader * nr,
+    const GstH266PPS * pps, GstH266SliceHdr * sh, guint16 curr_subpic_idx,
+    const guint16 ** ctb_addr_in_curr_slice, guint16 * num_ctus_in_curr_slice)
+{
+  GST_LOG ("parsing Slice Address");
+
+  if (!pps->no_pic_partition_flag && pps->rect_slice_flag) {
+    guint16 pic_level_slice_idx = sh->slice_address;
+    gint j;
+
+    for (j = 0; j < curr_subpic_idx; j++)
+      pic_level_slice_idx += pps->num_slices_in_subpic[j];
+
+    *ctb_addr_in_curr_slice = parser->ctb_addr_in_slice +
+        parser->slice_start_offset[pic_level_slice_idx];
+    *num_ctus_in_curr_slice = parser->num_ctus_in_slice[pic_level_slice_idx];
+  } else {
+    guint16 tile_idx;
+    guint16 tile_x = sh->slice_address % pps->num_tile_columns;
+    gint16 tile_y = sh->slice_address / pps->num_tile_columns;
+    guint16 slice_start_ctb =
+        pps->tile_row_bd_val[tile_y] * pps->pic_width_in_ctbs_y +
+        pps->tile_col_bd_val[tile_x] * (pps->tile_row_height_minus1[tile_y] +
+        1);
+
+    if (pps->num_tiles_in_pic - sh->slice_address > 1) {
+      READ_UE_MAX (nr, sh->num_tiles_in_slice_minus1,
+          pps->num_tiles_in_pic - 1);
+    } else {
+      sh->num_tiles_in_slice_minus1 = 0;
+    }
+
+    *ctb_addr_in_curr_slice = parser->ctb_addr_in_slice + slice_start_ctb;
+    *num_ctus_in_curr_slice = 0;
+    for (tile_idx = sh->slice_address;
+        tile_idx <= sh->slice_address + sh->num_tiles_in_slice_minus1;
+        tile_idx++) {
+      tile_x = tile_idx % pps->num_tile_columns;
+      tile_y = tile_idx / pps->num_tile_columns;
+      *num_ctus_in_curr_slice += (pps->tile_row_height_minus1[tile_y] + 1) *
+          (pps->tile_column_width_minus1[tile_x] + 1);
+    }
+  }
+
+  return TRUE;
+
+error:
+  GST_WARNING ("error parsing Slice Address");
+  return FALSE;
+}
+
+/**
+ * gst_h266_parser_parse_slice_hdr:
+ * @parser: a #GstH266Parser
+ * @nalu: The slice #GstH266NalUnit to parse
+ * @sh: The #GstH266SliceHdr to fill.
+ *
+ * Parses @data, and fills the @sh structure.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parser_parse_slice_hdr (GstH266Parser * parser,
+    GstH266NalUnit * nalu, GstH266SliceHdr * sh)
+{
+  NalReader nr;
+  const GstH266SPS *sps;
+  const GstH266PPS *pps;
+  const GstH266PicHdr *ph;
+  const GstH266RefPicLists *ref_pic_lists;
+  const GstH266GeneralConstraintsInfo *constraints_info;
+  guint8 nal_unit_type;
+  guint16 curr_subpic_idx, num_slices_in_subpic;
+  const guint16 *ctb_addr_in_curr_slice;        /* CtbAddrInCurrSlice */
+  guint16 num_ctus_in_curr_slice;       /* NumCtusInCurrSlice */
+  GstH266ParserResult ret = GST_H266_PARSER_OK;
+  gint i;
+
+  GST_LOG ("parsing Slice Header");
+
+  nal_reader_init (&nr, nalu->data + nalu->offset + nalu->header_bytes,
+      nalu->size - nalu->header_bytes);
+
+  memset (sh, 0, sizeof (*sh));
+
+  READ_UINT8 (&nr, sh->picture_header_in_slice_header_flag, 1);
+  if (sh->picture_header_in_slice_header_flag) {
+    ret = gst_h266_parse_picture_hdr_structure (&sh->picture_header,
+        &nr, parser);
+    if (ret != GST_H266_PARSER_OK)
+      goto error_with_ret;
+  } else {
+    if (!parser->ph.valid) {
+      GST_WARNING ("Picture header not available.\n");
+      goto error;
+    }
+
+    sh->picture_header = parser->ph;
+  }
+  ph = &sh->picture_header;
+
+  pps = gst_h266_parser_get_pps (parser, ph->pps_id);
+  if (!pps) {
+    GST_WARNING ("PPS id %d not available.", ph->pps_id);
+    ret = GST_H266_PARSER_BROKEN_LINK;
+    goto error_with_ret;
+  }
+
+  sps = gst_h266_parser_get_sps (parser, pps->sps_id);
+  if (!sps) {
+    GST_WARNING ("SPS id %d not available.", pps->sps_id);
+    ret = GST_H266_PARSER_BROKEN_LINK;
+    goto error_with_ret;
+  }
+
+  if (!gst_h266_parser_set_active_sps_pps (parser, sps, pps)) {
+    GST_WARNING ("PPS id %d not active.", ph->pps_id);
+    ret = GST_H266_PARSER_ERROR;
+    goto error_with_ret;
+  }
+
+  constraints_info = &sps->profile_tier_level.general_constraints_info;
+  if (constraints_info->pic_header_in_slice_header_constraint_flag &&
+      !sh->picture_header_in_slice_header_flag) {
+    GST_WARNING ("PH shall be present in SH, when "
+        "pic_header_in_slice_header_constraint_flag is equal to 1");
+    goto error;
+  }
+
+  if (sh->picture_header_in_slice_header_flag) {
+    if (pps->rpl_info_in_ph_flag) {
+      GST_WARNING ("When sh_picture_header_in_slice_header_flag is equal "
+          "to 1, rpl_info_in_ph_flag shall be equal to 0");
+      goto error;
+    }
+
+    if (pps->dbf_info_in_ph_flag) {
+      GST_WARNING ("When sh_picture_header_in_slice_header_flag is equal "
+          "to 1, dbf_info_in_ph_flag shall be equal to 0");
+      goto error;
+    }
+
+    if (pps->sao_info_in_ph_flag) {
+      GST_WARNING ("When sh_picture_header_in_slice_header_flag is equal "
+          "to 1, sao_info_in_ph_flag shall be equal to 0");
+      goto error;
+    }
+
+    if (pps->alf_info_in_ph_flag) {
+      GST_WARNING ("When sh_picture_header_in_slice_header_flag is equal "
+          "to 1, alf_info_in_ph_flag shall be equal to 0");
+      goto error;
+    }
+
+    if (pps->wp_info_in_ph_flag) {
+      GST_WARNING ("When sh_picture_header_in_slice_header_flag is equal "
+          "to 1, wp_info_in_ph_flag shall be equal to 0");
+      goto error;
+    }
+
+    if (pps->qp_delta_info_in_ph_flag) {
+      GST_WARNING ("When sh_picture_header_in_slice_header_flag is equal "
+          "to 1, qp_delta_info_in_ph_flag shall be equal to 0");
+      goto error;
+    }
+
+    if (sps->subpic_info_present_flag) {
+      GST_WARNING ("When sps_subpic_info_present_flag is equal to 1, "
+          "the value of sh_picture_header_in_slice_header_flag shall be "
+          "equal to 0");
+      goto error;
+    }
+  }
+
+  curr_subpic_idx = 0;
+  if (sps->subpic_info_present_flag) {
+    READ_UINT16 (&nr, sh->subpic_id, sps->subpic_id_len_minus1 + 1);
+
+    if (sps->subpic_id_mapping_explicitly_signalled_flag) {
+      for (i = 0; i <= sps->num_subpics_minus1; i++) {
+        guint16 subpic_id_val = pps->subpic_id_mapping_present_flag ?
+            pps->subpic_id[i] : sps->subpic_id[i];
+
+        if (subpic_id_val == sh->subpic_id) {
+          curr_subpic_idx = i;
+          break;
+        }
+      }
+    } else {
+      curr_subpic_idx = sh->subpic_id;
+      if (curr_subpic_idx > sps->num_subpics_minus1) {
+        GST_WARNING ("sh_subpic_id(%d) should in range [0, %d]",
+            curr_subpic_idx, sps->num_subpics_minus1);
+        goto error;
+      }
+    }
+  }
+
+  num_slices_in_subpic = pps->num_slices_in_subpic[curr_subpic_idx];
+
+  if ((pps->rect_slice_flag && num_slices_in_subpic > 1) ||
+      (!pps->rect_slice_flag && pps->num_tiles_in_pic > 1)) {
+    guint bits, max;
+
+    if (!pps->rect_slice_flag) {
+      bits = gst_util_ceil_log2 (pps->num_tiles_in_pic);
+      max = pps->num_tiles_in_pic - 1;
+    } else {
+      bits = gst_util_ceil_log2 (num_slices_in_subpic);
+      max = num_slices_in_subpic - 1;
+    }
+
+    READ_UINT16 (&nr, sh->slice_address, bits);
+    CHECK_ALLOWED_MAX (sh->slice_address, max);
+  } else {
+    sh->slice_address = 0;
+  }
+
+  for (i = 0; i < sps->num_extra_sh_bytes * 8; i++) {
+    if (sps->extra_sh_bit_present_flag[i])
+      READ_UINT8 (&nr, sh->extra_bit[i], 1);
+  }
+
+  if (!gst_h266_parser_parse_slice_address (parser, &nr, pps, sh,
+          curr_subpic_idx, &ctb_addr_in_curr_slice, &num_ctus_in_curr_slice))
+    goto error;
+
+  if (ph->inter_slice_allowed_flag) {
+    READ_UE_MAX (&nr, sh->slice_type, 2);
+  } else {
+    sh->slice_type = GST_H266_I_SLICE;
+  }
+  if (!ph->intra_slice_allowed_flag && sh->slice_type == GST_H266_I_SLICE) {
+    GST_WARNING ("when ph_intra_slice_allowed_flag = 0, "
+        "no I_Slice is allowed");
+    goto error;
+  }
+
+  nal_unit_type = nalu->type;
+  if (nal_unit_type == GST_H266_NAL_SLICE_IDR_W_RADL ||
+      nal_unit_type == GST_H266_NAL_SLICE_IDR_N_LP ||
+      nal_unit_type == GST_H266_NAL_SLICE_CRA ||
+      nal_unit_type == GST_H266_NAL_SLICE_GDR)
+    READ_UINT8 (&nr, sh->no_output_of_prior_pics_flag, 1);
+
+  if (sps->alf_enabled_flag && !pps->alf_info_in_ph_flag) {
+    READ_UINT8 (&nr, sh->alf_enabled_flag, 1);
+
+    if (sh->alf_enabled_flag) {
+      READ_UINT8 (&nr, sh->num_alf_aps_ids_luma, 3);
+      for (i = 0; i < sh->num_alf_aps_ids_luma; i++)
+        READ_UINT8 (&nr, sh->alf_aps_id_luma[i], 3);
+
+      if (sps->chroma_format_idc != 0) {
+        READ_UINT8 (&nr, sh->alf_cb_enabled_flag, 1);
+        READ_UINT8 (&nr, sh->alf_cr_enabled_flag, 1);
+      } else {
+        sh->alf_cb_enabled_flag = ph->alf_cb_enabled_flag;
+        sh->alf_cr_enabled_flag = ph->alf_cr_enabled_flag;
+      }
+
+      if (sh->alf_cb_enabled_flag || sh->alf_cr_enabled_flag) {
+        READ_UINT8 (&nr, sh->alf_aps_id_chroma, 3);
+      } else {
+        sh->alf_aps_id_chroma = ph->alf_aps_id_chroma;
+      }
+
+      if (sps->ccalf_enabled_flag) {
+        READ_UINT8 (&nr, sh->alf_cc_cb_enabled_flag, 1);
+        if (sh->alf_cc_cb_enabled_flag) {
+          READ_UINT8 (&nr, sh->alf_cc_cb_aps_id, 3);
+        } else {
+          sh->alf_cc_cb_aps_id = ph->alf_cc_cb_aps_id;
+        }
+
+        READ_UINT8 (&nr, sh->alf_cc_cr_enabled_flag, 1);
+        if (sh->alf_cc_cr_enabled_flag) {
+          READ_UINT8 (&nr, sh->alf_cc_cr_aps_id, 3);
+        } else {
+          sh->alf_cc_cr_aps_id = ph->alf_cc_cr_aps_id;
+        }
+      } else {
+        sh->alf_cc_cb_enabled_flag = ph->alf_cc_cb_enabled_flag;
+        sh->alf_cc_cr_enabled_flag = ph->alf_cc_cr_enabled_flag;
+        sh->alf_cc_cb_aps_id = ph->alf_cc_cb_aps_id;
+        sh->alf_cc_cr_aps_id = ph->alf_cc_cr_aps_id;
+      }
+    }
+  } else {
+    sh->alf_enabled_flag = ph->alf_enabled_flag;
+    sh->num_alf_aps_ids_luma = ph->num_alf_aps_ids_luma;
+    for (i = 0; i < sh->num_alf_aps_ids_luma; i++)
+      sh->alf_aps_id_luma[i] = ph->alf_aps_id_luma[i];
+    sh->alf_cb_enabled_flag = ph->alf_cb_enabled_flag;
+    sh->alf_cr_enabled_flag = ph->alf_cr_enabled_flag;
+    sh->alf_aps_id_chroma = ph->alf_aps_id_chroma;
+    sh->alf_cc_cb_enabled_flag = ph->alf_cc_cb_enabled_flag;
+    sh->alf_cc_cb_aps_id = ph->alf_cc_cb_aps_id;
+    sh->alf_cc_cr_enabled_flag = ph->alf_cc_cr_enabled_flag;
+    sh->alf_cc_cr_aps_id = ph->alf_cc_cr_aps_id;
+  }
+
+  if (ph->lmcs_enabled_flag && !sh->picture_header_in_slice_header_flag) {
+    READ_UINT8 (&nr, sh->lmcs_used_flag, 1);
+  } else {
+    sh->lmcs_used_flag =
+        sh->picture_header_in_slice_header_flag ? ph->lmcs_enabled_flag : 0;
+  }
+
+  if (ph->explicit_scaling_list_enabled_flag &&
+      !sh->picture_header_in_slice_header_flag) {
+    READ_UINT8 (&nr, sh->explicit_scaling_list_used_flag, 1);
+  } else {
+    sh->explicit_scaling_list_used_flag =
+        sh->picture_header_in_slice_header_flag ?
+        ph->explicit_scaling_list_enabled_flag : 0;
+  }
+
+  if (!pps->rpl_info_in_ph_flag &&
+      ((nal_unit_type != GST_H266_NAL_SLICE_IDR_W_RADL &&
+              nal_unit_type != GST_H266_NAL_SLICE_IDR_N_LP) ||
+          sps->idr_rpl_present_flag)) {
+    if (!gst_h266_ref_pic_lists (&sh->ref_pic_lists, &nr, sps, pps))
+      goto error;
+  } else {
+    sh->ref_pic_lists = ph->ref_pic_lists;
+  }
+  ref_pic_lists = &sh->ref_pic_lists;
+
+  if ((sh->slice_type != GST_H266_I_SLICE &&
+          ref_pic_lists->rpl_ref_list[0].num_ref_entries > 1) ||
+      (sh->slice_type == GST_H266_B_SLICE &&
+          ref_pic_lists->rpl_ref_list[1].num_ref_entries > 1)) {
+    READ_UINT8 (&nr, sh->num_ref_idx_active_override_flag, 1);
+    if (sh->num_ref_idx_active_override_flag) {
+      for (i = 0; i < (sh->slice_type == GST_H266_B_SLICE ? 2 : 1); i++)
+        if (ref_pic_lists->rpl_ref_list[i].num_ref_entries > 1) {
+          READ_UE_MAX (&nr, sh->num_ref_idx_active_minus1[i], 14);
+        } else {
+          sh->num_ref_idx_active_minus1[i] = 0;
+        }
+    }
+  } else {
+    sh->num_ref_idx_active_override_flag = 1;
+  }
+
+  for (i = 0; i < 2; i++) {
+    if (sh->slice_type == GST_H266_B_SLICE
+        || (sh->slice_type == GST_H266_P_SLICE && i == 0)) {
+      if (sh->num_ref_idx_active_override_flag) {
+        sh->num_ref_idx_active[i] = sh->num_ref_idx_active_minus1[i] + 1;
+      } else {
+        sh->num_ref_idx_active[i] =
+            MIN (ref_pic_lists->rpl_ref_list[i].num_ref_entries,
+            pps->num_ref_idx_default_active_minus1[i] + 1);
+      }
+    } else {
+      /* sh_slice_type == I || (sh_slice_type == P && i == 1) */
+      sh->num_ref_idx_active[i] = 0;
+    }
+  }
+
+  sh->collocated_from_l0_flag = ph->collocated_from_l0_flag;
+
+  if (sh->slice_type != GST_H266_I_SLICE) {
+    if (pps->cabac_init_present_flag) {
+      READ_UINT8 (&nr, sh->cabac_init_flag, 1);
+    } else {
+      sh->cabac_init_flag = 0;
+    }
+
+    if (ph->temporal_mvp_enabled_flag) {
+      if (ph->temporal_mvp_enabled_flag) {
+        if (sh->slice_type == GST_H266_P_SLICE) {
+          sh->collocated_from_l0_flag = 1;
+        } else if (!pps->rpl_info_in_ph_flag
+            && sh->slice_type == GST_H266_B_SLICE) {
+          READ_UINT8 (&nr, sh->collocated_from_l0_flag, 1);
+        } else {
+          sh->collocated_from_l0_flag = ph->collocated_from_l0_flag;
+        }
+      }
+
+      if (!pps->rpl_info_in_ph_flag) {
+        if ((sh->collocated_from_l0_flag && sh->num_ref_idx_active[0] > 1) ||
+            (!sh->collocated_from_l0_flag && sh->num_ref_idx_active[1] > 1)) {
+          gint idx = sh->collocated_from_l0_flag ? 0 : 1;
+          READ_UE_MAX (&nr, sh->collocated_ref_idx,
+              sh->num_ref_idx_active[idx] - 1);
+        } else {
+          sh->collocated_ref_idx = 0;
+        }
+      } else {
+        sh->collocated_ref_idx = ph->collocated_ref_idx;
+      }
+    }
+
+    if (!pps->wp_info_in_ph_flag &&
+        ((pps->weighted_pred_flag && sh->slice_type == GST_H266_P_SLICE) ||
+            (pps->weighted_bipred_flag &&
+                sh->slice_type == GST_H266_B_SLICE))) {
+      if (!gst_h266_parse_pred_weight_table (&sh->pred_weight_table,
+              &nr, sps, pps, ref_pic_lists, sh->num_ref_idx_active))
+        goto error;
+    }
+  }
+
+  if (!pps->qp_delta_info_in_ph_flag) {
+    READ_SE_ALLOWED (&nr, sh->qp_delta, -63, 63);
+  } else {
+    sh->qp_delta = ph->qp_delta;
+  }
+  sh->slice_qp_y = 26 + pps->init_qp_minus26 + sh->qp_delta;
+  if (sh->slice_qp_y < -6 * sps->bitdepth_minus8 || sh->slice_qp_y > 63) {
+    GST_WARNING ("SliceQpy = %d is our of range.", sh->slice_qp_y);
+    goto error;
+  }
+
+  if (pps->slice_chroma_qp_offsets_present_flag) {
+    gint8 off;
+
+    READ_SE_ALLOWED (&nr, sh->cb_qp_offset, -12, 12);
+    off = pps->cb_qp_offset + sh->cb_qp_offset;
+    if (off < -12 || off > 12) {
+      GST_WARNING ("pps_cb_qp_offset + sh_cb_qp_offset(%d) = %d, "
+          "out of range [-12, 12].", sh->cb_qp_offset, off);
+      goto error;
+    }
+
+    READ_SE_ALLOWED (&nr, sh->cr_qp_offset, -12, 12);
+    off = pps->cr_qp_offset + sh->cr_qp_offset;
+    if (off < -12 || off > 12) {
+      GST_WARNING ("pps_cr_qp_offset + sh_cr_qp_offset(%d) = %d, "
+          "out of range [-12, 12].", sh->cr_qp_offset, off);
+      goto error;
+    }
+
+    if (sps->joint_cbcr_enabled_flag) {
+      READ_SE_ALLOWED (&nr, sh->joint_cbcr_qp_offset, -12, 12);
+      off = pps->joint_cbcr_qp_offset_value + sh->joint_cbcr_qp_offset;
+      if (off < -12 || off > 12) {
+        GST_WARNING ("pps_joint_cbcr_qp_offset_value + sh_joint_cbcr_qp_offset"
+            "(%d) = %d, out of range [-12, 12].",
+            sh->joint_cbcr_qp_offset, off);
+        goto error;
+      }
+    } else {
+      sh->joint_cbcr_qp_offset = 0;
+    }
+  } else {
+    sh->cb_qp_offset = 0;
+    sh->cr_qp_offset = 0;
+    sh->joint_cbcr_qp_offset = 0;
+  }
+
+  if (pps->cu_chroma_qp_offset_list_enabled_flag) {
+    READ_UINT8 (&nr, sh->cu_chroma_qp_offset_enabled_flag, 1);
+  } else {
+    sh->cu_chroma_qp_offset_enabled_flag = 0;
+  }
+
+  if (sps->sao_enabled_flag && !pps->sao_info_in_ph_flag) {
+    READ_UINT8 (&nr, sh->sao_luma_used_flag, 1);
+
+    if (sps->chroma_format_idc != 0) {
+      READ_UINT8 (&nr, sh->sao_chroma_used_flag, 1);
+    } else {
+      sh->sao_chroma_used_flag = ph->sao_chroma_enabled_flag;
+    }
+  } else {
+    sh->sao_luma_used_flag = ph->sao_luma_enabled_flag;
+    sh->sao_chroma_used_flag = ph->sao_chroma_enabled_flag;
+  }
+
+  /* Inherit deblock filter features from picture header */
+  sh->deblocking_filter_disabled_flag = ph->deblocking_filter_disabled_flag;
+  sh->luma_beta_offset_div2 = ph->luma_beta_offset_div2;
+  sh->luma_tc_offset_div2 = ph->luma_tc_offset_div2;
+  sh->cb_beta_offset_div2 = ph->cb_beta_offset_div2;
+  sh->cb_tc_offset_div2 = ph->cb_tc_offset_div2;
+  sh->cr_beta_offset_div2 = ph->cr_beta_offset_div2;
+  sh->cr_tc_offset_div2 = ph->cr_tc_offset_div2;
+
+  if (pps->deblocking_filter_override_enabled_flag && !pps->dbf_info_in_ph_flag) {
+    READ_UINT8 (&nr, sh->deblocking_params_present_flag, 1);
+  } else {
+    sh->deblocking_params_present_flag = 0;
+  }
+  if (sh->deblocking_params_present_flag) {
+    if (!pps->deblocking_filter_disabled_flag) {
+      READ_UINT8 (&nr, sh->deblocking_filter_disabled_flag, 1);
+    } else {
+      sh->deblocking_filter_disabled_flag = 0;
+    }
+
+    if (!sh->deblocking_filter_disabled_flag) {
+      READ_SE_ALLOWED (&nr, sh->luma_beta_offset_div2, -12, 12);
+      READ_SE_ALLOWED (&nr, sh->luma_tc_offset_div2, -12, 12);
+
+      if (pps->chroma_tool_offsets_present_flag) {
+        READ_SE_ALLOWED (&nr, sh->cb_beta_offset_div2, -12, 12);
+        READ_SE_ALLOWED (&nr, sh->cb_tc_offset_div2, -12, 12);
+        READ_SE_ALLOWED (&nr, sh->cr_beta_offset_div2, -12, 12);
+        READ_SE_ALLOWED (&nr, sh->cr_tc_offset_div2, -12, 12);
+      } else {
+        sh->cb_beta_offset_div2 = sh->luma_beta_offset_div2;
+        sh->cb_tc_offset_div2 = sh->luma_tc_offset_div2;
+        sh->cr_beta_offset_div2 = sh->luma_beta_offset_div2;
+        sh->cr_tc_offset_div2 = sh->luma_tc_offset_div2;
+      }
+    }
+  }
+
+  if (sps->dep_quant_enabled_flag) {
+    READ_UINT8 (&nr, sh->dep_quant_used_flag, 1);
+  } else {
+    sh->dep_quant_used_flag = 0;
+  }
+  if (sps->sign_data_hiding_enabled_flag && !sh->dep_quant_used_flag) {
+    READ_UINT8 (&nr, sh->sign_data_hiding_used_flag, 1);
+  } else {
+    sh->sign_data_hiding_used_flag = 0;
+  }
+  if (sps->transform_skip_enabled_flag &&
+      !sh->dep_quant_used_flag && !sh->sign_data_hiding_used_flag) {
+    READ_UINT8 (&nr, sh->ts_residual_coding_disabled_flag, 1);
+  } else {
+    sh->ts_residual_coding_disabled_flag = 0;
+  }
+
+  if (sh->ts_residual_coding_disabled_flag &&
+      sps->range_params.ts_residual_coding_rice_present_in_sh_flag) {
+    READ_UINT8 (&nr, sh->ts_residual_coding_rice_idx_minus1, 3);
+  } else {
+    sh->ts_residual_coding_rice_idx_minus1 = 0;
+  }
+
+  if (sps->range_params.reverse_last_sig_coeff_enabled_flag) {
+    READ_UINT8 (&nr, sh->reverse_last_sig_coeff_flag, 1);
+  } else {
+    sh->reverse_last_sig_coeff_flag = 0;
+  }
+
+  if (pps->slice_header_extension_present_flag) {
+    READ_UE_MAX (&nr, sh->slice_header_extension_length, 256);
+    for (i = 0; i < sh->slice_header_extension_length; i++)
+      READ_UINT8 (&nr, sh->slice_header_extension_data_byte[i], 8);
+  }
+
+  /* (141) */
+  sh->num_entry_points = 0;
+  if (sps->entry_point_offsets_present_flag) {
+    for (i = 1; i < num_ctus_in_curr_slice; i++) {
+      guint16 ctb_addr_x, ctb_addr_y, pre_ctb_addr_x, pre_ctb_addr_y;
+
+      ctb_addr_x = ctb_addr_in_curr_slice[i] % pps->pic_width_in_ctbs_y;
+      ctb_addr_y = ctb_addr_in_curr_slice[i] / pps->pic_width_in_ctbs_y;
+      pre_ctb_addr_x = ctb_addr_in_curr_slice[i - 1] % pps->pic_width_in_ctbs_y;
+      pre_ctb_addr_y = ctb_addr_in_curr_slice[i - 1] / pps->pic_width_in_ctbs_y;
+
+      if (parser->ctb_to_tile_row_bd[ctb_addr_y] !=
+          parser->ctb_to_tile_row_bd[pre_ctb_addr_y]
+          || parser->ctb_to_tile_col_bd[ctb_addr_x] !=
+          parser->ctb_to_tile_col_bd[pre_ctb_addr_x]
+          || (ctb_addr_y != pre_ctb_addr_y
+              && sps->entropy_coding_sync_enabled_flag)) {
+        sh->entry_point_start_ctu[sh->num_entry_points] = i;
+        sh->num_entry_points++;
+      }
+    }
+
+    if (sh->num_entry_points > GST_H266_MAX_ENTRY_POINTS) {
+      GST_WARNING ("Too many entry points: %d.", sh->num_entry_points);
+      goto error;
+    }
+    if (sh->num_entry_points > 0) {
+      READ_UE_MAX (&nr, sh->entry_offset_len_minus1, 31);
+      for (i = 0; i < sh->num_entry_points; i++) {
+        READ_UINT32 (&nr, sh->entry_point_offset_minus1[i],
+            sh->entry_offset_len_minus1 + 1);
+      }
+    }
+  }
+
+  /* Skip the byte alignment bits */
+  if (!nal_reader_skip (&nr, 1))
+    goto error;
+  while (!nal_reader_is_byte_aligned (&nr))
+    if (!nal_reader_skip (&nr, 1))
+      goto error;
+
+  sh->header_size = nal_reader_get_pos (&nr);
+  sh->n_emulation_prevention_bytes = nal_reader_get_epb_count (&nr);
+
+  return ret;
 
 error:
-  GST_WARNING ("error parsing \"Adaptation parameter set\"");
-  aps->valid = FALSE;
+  ret = GST_H266_PARSER_ERROR;
+error_with_ret:
+  GST_WARNING ("error parsing \"Slice Header\"");
+  return ret;
+}
+
+static GstH266ParserResult
+gst_h266_parser_parse_sei_message (GstH266SEIMessage * sei, NalReader * nr,
+    GstH266Parser * parser, guint8 nal_type, guint8 nal_tid)
+{
+  guint8 payload_type_byte, payload_size_byte;
+  guint remaining, payload_size, payloadSize, payload_start_pos_bit;
+  GstH266ParserResult res = GST_H266_PARSER_OK;
+
+  if (nal_type == GST_H266_NAL_PREFIX_SEI)
+    GST_LOG ("parsing \"Prefix SEI message\"");
+  else if (nal_type == GST_H266_NAL_SUFFIX_SEI)
+    GST_LOG ("parsing \"Suffix SEI message\"");
+
+  memset (sei, 0, sizeof (*sei));
+
+  do {
+    READ_UINT8 (nr, payload_type_byte, 8);
+    sei->payloadType += payload_type_byte;
+  } while (payload_type_byte == 0xff);
+  payloadSize = 0;
+  do {
+    READ_UINT8 (nr, payload_size_byte, 8);
+    payloadSize += payload_size_byte;
+  } while (payload_size_byte == 0xff);
+
+  remaining = nal_reader_get_remaining (nr);
+  payload_size = payloadSize * 8 < remaining ? payloadSize * 8 : remaining;
+  payload_start_pos_bit = nal_reader_get_pos (nr);
+
+  GST_LOG ("SEI message received: payloadType  %u, payloadSize = %u bits",
+      sei->payloadType, payload_size);
+
+  if (nal_type == GST_H266_NAL_PREFIX_SEI) {
+    switch (sei->payloadType) {
+      case GST_H266_SEI_BUF_PERIOD:
+        res = gst_h266_parser_parse_buffering_period
+            (&sei->payload.buffering_period, nr);
+        if (res == GST_H266_PARSER_OK) {
+          parser->buffering_period = *sei;
+          parser->last_buffering_period = &parser->buffering_period;
+        }
+        break;
+      case GST_H266_SEI_PIC_TIMING:
+        if (!parser->last_buffering_period) {
+          GST_WARNING ("No buffering_period SEI.");
+          goto error;
+        }
+
+        res = gst_h266_parser_parse_pic_timing (&sei->payload.pic_timing, nr,
+            &parser->buffering_period.payload.buffering_period, nal_tid);
+        break;
+      case GST_H266_SEI_DU_INFO:
+        if (!parser->last_buffering_period) {
+          GST_WARNING ("No buffering_period SEI.");
+          goto error;
+        }
+
+        res = gst_h266_parser_parse_du_info (&sei->payload.du_info, nr,
+            &parser->buffering_period.payload.buffering_period, nal_tid);
+        break;
+      case GST_H266_SEI_FRAME_FIELD_INFO:
+        res = gst_h266_parser_parse_frame_field_info
+            (&sei->payload.frame_field_info, nr);
+        break;
+      case GST_H266_SEI_SUBPIC_LEVEL_INFO:
+        res = gst_h266_parser_parse_subpic_level_info
+            (&sei->payload.subpic_level_info, nr);
+        break;
+      default:
+        /* Just consume payloadSize bytes, which does not account for
+           emulation prevention bytes */
+        if (!nal_reader_skip_long (nr, payload_size))
+          goto error;
+        res = GST_H266_PARSER_OK;
+        break;
+    }
+  } else if (nal_type == GST_H266_NAL_SUFFIX_SEI) {
+    switch (sei->payloadType) {
+      case GST_H266_SEI_SCALABLE_NESTING:
+        res = gst_h266_parser_parse_scalable_nesting
+            (&sei->payload.scalable_nesting, nr);
+        break;
+      default:
+        /* Just consume payloadSize bytes, which does not account for
+           emulation prevention bytes */
+        if (!nal_reader_skip_long (nr, payload_size))
+          goto error;
+        res = GST_H266_PARSER_OK;
+        break;
+    }
+  }
+
+  /* Not parsing the reserved_payload_extension, but it shouldn't be
+   * an issue because of 1: There shall not be any reserved_payload_extension
+   * present in bitstreams conforming to the specification.2. Even though
+   * it is present, the size will be less than total PayloadSize since the
+   * size of reserved_payload_extension is supposed to be
+   * 8 * payloadSize - nEarlierBits - nPayloadZeroBits -1 which means the
+   * the current implementation will still skip all unnecessary bits correctly.
+   * In theory, we can have a more optimized implementation by skipping the
+   * data left in PayLoadSize without out individually checking for each bits,
+   * since the totoal size will be always less than payloadSize*/
+  while (nal_reader_has_more_data_in_payload (nr, payload_start_pos_bit,
+          payloadSize)) {
+    /* Skip the byte alignment bits */
+    if (!nal_reader_skip (nr, 1))
+      goto error;
+    while (!nal_reader_is_byte_aligned (nr)) {
+      if (!nal_reader_skip (nr, 1))
+        goto error;
+    }
+  }
+
+  return res;
+
+error:
+  GST_WARNING ("error parsing \"Sei message\"");
   return GST_H266_PARSER_ERROR;
 }
 
+/**
+ * gst_h266_parser_parse_sei:
+ * @nalparser: a #GstH266Parser
+ * @nalu: The `GST_H266_NAL_*_SEI` #GstH266NalUnit to parse
+ * @messages: The GArray of #GstH266SEIMessage to fill. The caller must free
+ *  it when done.
+ *
+ * Parses @data, create and fills the @messages array.
+ *
+ * Returns: a #GstH266ParserResult
+ *
+ * Since: 1.26
+ */
+GstH266ParserResult
+gst_h266_parser_parse_sei (GstH266Parser * nalparser, GstH266NalUnit * nalu,
+    GArray ** messages)
+{
+  NalReader nr;
+  GstH266SEIMessage sei;
+  GstH266ParserResult res;
+
+  GST_LOG ("parsing SEI nal");
+
+  nal_reader_init (&nr, nalu->data + nalu->offset + nalu->header_bytes,
+      nalu->size - nalu->header_bytes);
+  *messages = g_array_new (FALSE, FALSE, sizeof (GstH266SEIMessage));
+
+  do {
+    res = gst_h266_parser_parse_sei_message (&sei, &nr, nalparser, nalu->type,
+        nalu->temporal_id_plus1 - 1);
+    if (res == GST_H266_PARSER_OK)
+      g_array_append_val (*messages, sei);
+    else
+      break;
+  } while (nal_reader_has_more_data (&nr));
+
+  return res;
+}
+
 /**
  * gst_h266_profile_to_string:
  * @profile: a #GstH266Profile
-- 
2.43.0

