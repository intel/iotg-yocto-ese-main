From 2f808858210c361920b4faf6013303f23ed57801 Mon Sep 17 00:00:00 2001
From: "Hoe, Sheng Yang" <sheng.yang.hoe@intel.com>
Date: Mon, 26 Aug 2024 22:57:26 +0800
Subject: [PATCH 1/2] Enable AV1 encode Screen Content Coding tools

Upstream-Status: Submitted [https://github.com/intel-innersource/libraries.media.vpl.tools/pull/54]

Signed-off-by: Hoe, Sheng Yang <sheng.yang.hoe@intel.com>
---
 tools/legacy/sample_common/include/sample_utils.h    |  5 +++++
 tools/legacy/sample_common/src/parameters_dumper.cpp |  6 ++++++
 tools/legacy/sample_encode/include/pipeline_encode.h |  2 ++
 tools/legacy/sample_encode/src/pipeline_encode.cpp   | 11 +++++++++++
 tools/legacy/sample_encode/src/sample_encode.cpp     |  9 +++++++++
 5 files changed, 33 insertions(+)

diff --git a/tools/legacy/sample_common/include/sample_utils.h b/tools/legacy/sample_common/include/sample_utils.h
index 9a2453d..4fecd84 100644
--- a/tools/legacy/sample_common/include/sample_utils.h
+++ b/tools/legacy/sample_common/include/sample_utils.h
@@ -502,6 +502,11 @@ struct mfx_ext_buffer_id<mfxExtTuneEncodeQuality> {
 };
 #endif
 
+template <>
+struct mfx_ext_buffer_id<mfxExtAV1ScreenContentTools> {
+    enum { id = MFX_EXTBUFF_AV1_SCREEN_CONTENT_TOOLS };
+};
+
 constexpr uint16_t max_num_ext_buffers =
     63 * 2; // '*2' is for max estimation if all extBuffer were 'paired'
 
diff --git a/tools/legacy/sample_common/src/parameters_dumper.cpp b/tools/legacy/sample_common/src/parameters_dumper.cpp
index ed938f3..557112f 100644
--- a/tools/legacy/sample_common/src/parameters_dumper.cpp
+++ b/tools/legacy/sample_common/src/parameters_dumper.cpp
@@ -354,6 +354,12 @@ void CParametersDumper::SerializeExtensionBuffer(std::ostream& sstr,
             SERIALIZE_INFO(prefix, BRCPanicMode);
             SERIALIZE_INFO_ARRAY(prefix, reserved);
         } break;
+        case MFX_EXTBUFF_AV1_SCREEN_CONTENT_TOOLS: {
+            mfxExtAV1ScreenContentTools& info = *(mfxExtAV1ScreenContentTools*)pExtBuffer;
+            SERIALIZE_INFO(prefix, Palette);
+            SERIALIZE_INFO(prefix, IntraBlockCopy);
+            SERIALIZE_INFO_ARRAY(prefix, reserved);
+        } break;
         case MFX_EXTBUFF_VPP_DONOTUSE: {
             mfxExtVPPDoNotUse& info = *(mfxExtVPPDoNotUse*)pExtBuffer;
             SERIALIZE_INFO(prefix, NumAlg);
diff --git a/tools/legacy/sample_encode/include/pipeline_encode.h b/tools/legacy/sample_encode/include/pipeline_encode.h
index 70e77df..77065eb 100644
--- a/tools/legacy/sample_encode/include/pipeline_encode.h
+++ b/tools/legacy/sample_encode/include/pipeline_encode.h
@@ -250,6 +250,8 @@ struct sInputParams {
     bool bSingleTexture;
 
     mfxU16 nIVFHeader;
+    mfxU16 nPalette;
+    mfxU16 nIntraBlockCopy;
 
     char* RoundingOffsetFile;
     mfxU16 TargetBitDepthLuma;
diff --git a/tools/legacy/sample_encode/src/pipeline_encode.cpp b/tools/legacy/sample_encode/src/pipeline_encode.cpp
index b29dc29..c79634c 100644
--- a/tools/legacy/sample_encode/src/pipeline_encode.cpp
+++ b/tools/legacy/sample_encode/src/pipeline_encode.cpp
@@ -793,6 +793,17 @@ mfxStatus CEncodingPipeline::InitMfxEncParams(sInputParams* pInParams) {
     }
 #endif
 
+    if (pInParams->nPalette || pInParams->nIntraBlockCopy) {
+        if (MFX_CODEC_AV1 == pInParams->CodecId) {
+            auto av1ScreenContentTools = m_mfxEncParams.AddExtBuffer<mfxExtAV1ScreenContentTools>();
+            av1ScreenContentTools->Palette        = pInParams->nPalette;
+            av1ScreenContentTools->IntraBlockCopy = pInParams->nIntraBlockCopy;
+        }
+        else {
+            printf("WARNING: -palette_mode and -intrabc support AV1 only\n");
+        }
+    }
+
     mfxStatus sts =
         SetParameters((mfxSession)(m_mfxSession), m_mfxEncParams, pInParams->m_encode_cfg);
     MSDK_CHECK_STATUS(sts, "SetParameters failed");
diff --git a/tools/legacy/sample_encode/src/sample_encode.cpp b/tools/legacy/sample_encode/src/sample_encode.cpp
index ed142f5..85baa84 100644
--- a/tools/legacy/sample_encode/src/sample_encode.cpp
+++ b/tools/legacy/sample_encode/src/sample_encode.cpp
@@ -307,6 +307,9 @@ void PrintHelp(char* strAppName, const char* strErrorMessage, ...) {
         "   [-preset <default,dss,conference,gaming>] - Use particular preset for encoding parameters\n");
     printf("   [-pp] - Print preset parameters\n");
     printf("   [-ivf:<on,off>] - Turn IVF header on/off\n");
+    printf("   [-palette_mode] - Enable palette prediction for encoder, available for AV1 only\n");
+    printf(
+        "   [-intrabc] - Enable intra block copy prediction for encoder, available for AV1 only\n");
     printf(
         "   [-api_ver_init::<1x,2x>]  - select the api version for the session initialization\n");
     printf("   [-rbf] - read frame-by-frame from the input (sw lib only)\n");
@@ -754,6 +757,12 @@ mfxStatus ParseAdditionalParams(char* strInput[],
         i++;
         pParams->m_vpp_cfg = strInput[i];
     }
+    else if (msdk_match(strInput[i], "-palette_mode")) {
+        pParams->nPalette = MFX_CODINGOPTION_ON;
+    }
+    else if (msdk_match(strInput[i], "-intrabc")) {
+        pParams->nIntraBlockCopy = MFX_CODINGOPTION_ON;
+    }
     else {
         return MFX_ERR_NOT_FOUND;
     }
-- 
2.43.0

